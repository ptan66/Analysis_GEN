//
// File generated by rootcint at Tue Nov  3 14:05:16 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME kinematicsDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "kinematicsDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void _event_filterBit__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__event_filterBit_(void *p = 0);
   static void *newArray__event_filterBit_(Long_t size, void *p);
   static void delete__event_filterBit_(void *p);
   static void deleteArray__event_filterBit_(void *p);
   static void destruct__event_filterBit_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_event_filterBit_*)
   {
      ::_event_filterBit_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_event_filterBit_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_event_filterBit_", ::_event_filterBit_::Class_Version(), "./kinematics.h", 32,
                  typeid(::_event_filterBit_), DefineBehavior(ptr, ptr),
                  &::_event_filterBit_::Dictionary, isa_proxy, 4,
                  sizeof(::_event_filterBit_) );
      instance.SetNew(&new__event_filterBit_);
      instance.SetNewArray(&newArray__event_filterBit_);
      instance.SetDelete(&delete__event_filterBit_);
      instance.SetDeleteArray(&deleteArray__event_filterBit_);
      instance.SetDestructor(&destruct__event_filterBit_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_event_filterBit_*)
   {
      return GenerateInitInstanceLocal((::_event_filterBit_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_event_filterBit_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _gen_eventInfo__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__gen_eventInfo_(void *p = 0);
   static void *newArray__gen_eventInfo_(Long_t size, void *p);
   static void delete__gen_eventInfo_(void *p);
   static void deleteArray__gen_eventInfo_(void *p);
   static void destruct__gen_eventInfo_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_gen_eventInfo_*)
   {
      ::_gen_eventInfo_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_gen_eventInfo_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_gen_eventInfo_", ::_gen_eventInfo_::Class_Version(), "./kinematics.h", 65,
                  typeid(::_gen_eventInfo_), DefineBehavior(ptr, ptr),
                  &::_gen_eventInfo_::Dictionary, isa_proxy, 4,
                  sizeof(::_gen_eventInfo_) );
      instance.SetNew(&new__gen_eventInfo_);
      instance.SetNewArray(&newArray__gen_eventInfo_);
      instance.SetDelete(&delete__gen_eventInfo_);
      instance.SetDeleteArray(&deleteArray__gen_eventInfo_);
      instance.SetDestructor(&destruct__gen_eventInfo_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_gen_eventInfo_*)
   {
      return GenerateInitInstanceLocal((::_gen_eventInfo_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_gen_eventInfo_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _mc_process__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__mc_process_(void *p = 0);
   static void *newArray__mc_process_(Long_t size, void *p);
   static void delete__mc_process_(void *p);
   static void deleteArray__mc_process_(void *p);
   static void destruct__mc_process_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_mc_process_*)
   {
      ::_mc_process_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_mc_process_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_mc_process_", ::_mc_process_::Class_Version(), "./kinematics.h", 98,
                  typeid(::_mc_process_), DefineBehavior(ptr, ptr),
                  &::_mc_process_::Dictionary, isa_proxy, 4,
                  sizeof(::_mc_process_) );
      instance.SetNew(&new__mc_process_);
      instance.SetNewArray(&newArray__mc_process_);
      instance.SetDelete(&delete__mc_process_);
      instance.SetDeleteArray(&deleteArray__mc_process_);
      instance.SetDestructor(&destruct__mc_process_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_mc_process_*)
   {
      return GenerateInitInstanceLocal((::_mc_process_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_mc_process_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _gen_ttbar__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__gen_ttbar_(void *p = 0);
   static void *newArray__gen_ttbar_(Long_t size, void *p);
   static void delete__gen_ttbar_(void *p);
   static void deleteArray__gen_ttbar_(void *p);
   static void destruct__gen_ttbar_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_gen_ttbar_*)
   {
      ::_gen_ttbar_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_gen_ttbar_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_gen_ttbar_", ::_gen_ttbar_::Class_Version(), "./kinematics.h", 160,
                  typeid(::_gen_ttbar_), DefineBehavior(ptr, ptr),
                  &::_gen_ttbar_::Dictionary, isa_proxy, 4,
                  sizeof(::_gen_ttbar_) );
      instance.SetNew(&new__gen_ttbar_);
      instance.SetNewArray(&newArray__gen_ttbar_);
      instance.SetDelete(&delete__gen_ttbar_);
      instance.SetDeleteArray(&deleteArray__gen_ttbar_);
      instance.SetDestructor(&destruct__gen_ttbar_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_gen_ttbar_*)
   {
      return GenerateInitInstanceLocal((::_gen_ttbar_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_gen_ttbar_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _gen_DrellYan__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__gen_DrellYan_(void *p = 0);
   static void *newArray__gen_DrellYan_(Long_t size, void *p);
   static void delete__gen_DrellYan_(void *p);
   static void deleteArray__gen_DrellYan_(void *p);
   static void destruct__gen_DrellYan_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_gen_DrellYan_*)
   {
      ::_gen_DrellYan_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_gen_DrellYan_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_gen_DrellYan_", ::_gen_DrellYan_::Class_Version(), "./kinematics.h", 212,
                  typeid(::_gen_DrellYan_), DefineBehavior(ptr, ptr),
                  &::_gen_DrellYan_::Dictionary, isa_proxy, 4,
                  sizeof(::_gen_DrellYan_) );
      instance.SetNew(&new__gen_DrellYan_);
      instance.SetNewArray(&newArray__gen_DrellYan_);
      instance.SetDelete(&delete__gen_DrellYan_);
      instance.SetDeleteArray(&deleteArray__gen_DrellYan_);
      instance.SetDestructor(&destruct__gen_DrellYan_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_gen_DrellYan_*)
   {
      return GenerateInitInstanceLocal((::_gen_DrellYan_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_gen_DrellYan_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _genwz__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__genwz_(void *p = 0);
   static void *newArray__genwz_(Long_t size, void *p);
   static void delete__genwz_(void *p);
   static void deleteArray__genwz_(void *p);
   static void destruct__genwz_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_genwz_*)
   {
      ::_genwz_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_genwz_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_genwz_", ::_genwz_::Class_Version(), "./kinematics.h", 266,
                  typeid(::_genwz_), DefineBehavior(ptr, ptr),
                  &::_genwz_::Dictionary, isa_proxy, 4,
                  sizeof(::_genwz_) );
      instance.SetNew(&new__genwz_);
      instance.SetNewArray(&newArray__genwz_);
      instance.SetDelete(&delete__genwz_);
      instance.SetDeleteArray(&deleteArray__genwz_);
      instance.SetDestructor(&destruct__genwz_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_genwz_*)
   {
      return GenerateInitInstanceLocal((::_genwz_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_genwz_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _vec4__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__vec4_(void *p = 0);
   static void *newArray__vec4_(Long_t size, void *p);
   static void delete__vec4_(void *p);
   static void deleteArray__vec4_(void *p);
   static void destruct__vec4_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_vec4_*)
   {
      ::_vec4_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_vec4_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_vec4_", ::_vec4_::Class_Version(), "./kinematics.h", 305,
                  typeid(::_vec4_), DefineBehavior(ptr, ptr),
                  &::_vec4_::Dictionary, isa_proxy, 4,
                  sizeof(::_vec4_) );
      instance.SetNew(&new__vec4_);
      instance.SetNewArray(&newArray__vec4_);
      instance.SetDelete(&delete__vec4_);
      instance.SetDeleteArray(&deleteArray__vec4_);
      instance.SetDestructor(&destruct__vec4_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_vec4_*)
   {
      return GenerateInitInstanceLocal((::_vec4_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_vec4_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _met__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__met_(void *p = 0);
   static void *newArray__met_(Long_t size, void *p);
   static void delete__met_(void *p);
   static void deleteArray__met_(void *p);
   static void destruct__met_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_met_*)
   {
      ::_met_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_met_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_met_", ::_met_::Class_Version(), "./kinematics.h", 324,
                  typeid(::_met_), DefineBehavior(ptr, ptr),
                  &::_met_::Dictionary, isa_proxy, 4,
                  sizeof(::_met_) );
      instance.SetNew(&new__met_);
      instance.SetNewArray(&newArray__met_);
      instance.SetDelete(&delete__met_);
      instance.SetDeleteArray(&deleteArray__met_);
      instance.SetDestructor(&destruct__met_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_met_*)
   {
      return GenerateInitInstanceLocal((::_met_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_met_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _track__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__track_(void *p = 0);
   static void *newArray__track_(Long_t size, void *p);
   static void delete__track_(void *p);
   static void deleteArray__track_(void *p);
   static void destruct__track_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_track_*)
   {
      ::_track_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_track_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_track_", ::_track_::Class_Version(), "./kinematics.h", 347,
                  typeid(::_track_), DefineBehavior(ptr, ptr),
                  &::_track_::Dictionary, isa_proxy, 4,
                  sizeof(::_track_) );
      instance.SetNew(&new__track_);
      instance.SetNewArray(&newArray__track_);
      instance.SetDelete(&delete__track_);
      instance.SetDeleteArray(&deleteArray__track_);
      instance.SetDestructor(&destruct__track_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_track_*)
   {
      return GenerateInitInstanceLocal((::_track_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_track_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _trg_bits__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__trg_bits_(void *p = 0);
   static void *newArray__trg_bits_(Long_t size, void *p);
   static void delete__trg_bits_(void *p);
   static void deleteArray__trg_bits_(void *p);
   static void destruct__trg_bits_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_trg_bits_*)
   {
      ::_trg_bits_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_trg_bits_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_trg_bits_", ::_trg_bits_::Class_Version(), "./kinematics.h", 403,
                  typeid(::_trg_bits_), DefineBehavior(ptr, ptr),
                  &::_trg_bits_::Dictionary, isa_proxy, 4,
                  sizeof(::_trg_bits_) );
      instance.SetNew(&new__trg_bits_);
      instance.SetNewArray(&newArray__trg_bits_);
      instance.SetDelete(&delete__trg_bits_);
      instance.SetDeleteArray(&deleteArray__trg_bits_);
      instance.SetDestructor(&destruct__trg_bits_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_trg_bits_*)
   {
      return GenerateInitInstanceLocal((::_trg_bits_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_trg_bits_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _hlt_info__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__hlt_info_(void *p = 0);
   static void *newArray__hlt_info_(Long_t size, void *p);
   static void delete__hlt_info_(void *p);
   static void deleteArray__hlt_info_(void *p);
   static void destruct__hlt_info_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_hlt_info_*)
   {
      ::_hlt_info_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_hlt_info_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_hlt_info_", ::_hlt_info_::Class_Version(), "./kinematics.h", 429,
                  typeid(::_hlt_info_), DefineBehavior(ptr, ptr),
                  &::_hlt_info_::Dictionary, isa_proxy, 4,
                  sizeof(::_hlt_info_) );
      instance.SetNew(&new__hlt_info_);
      instance.SetNewArray(&newArray__hlt_info_);
      instance.SetDelete(&delete__hlt_info_);
      instance.SetDeleteArray(&deleteArray__hlt_info_);
      instance.SetDestructor(&destruct__hlt_info_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_hlt_info_*)
   {
      return GenerateInitInstanceLocal((::_hlt_info_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_hlt_info_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _mets__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__mets_(void *p = 0);
   static void *newArray__mets_(Long_t size, void *p);
   static void delete__mets_(void *p);
   static void deleteArray__mets_(void *p);
   static void destruct__mets_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_mets_*)
   {
      ::_mets_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_mets_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_mets_", ::_mets_::Class_Version(), "./kinematics.h", 455,
                  typeid(::_mets_), DefineBehavior(ptr, ptr),
                  &::_mets_::Dictionary, isa_proxy, 4,
                  sizeof(::_mets_) );
      instance.SetNew(&new__mets_);
      instance.SetNewArray(&newArray__mets_);
      instance.SetDelete(&delete__mets_);
      instance.SetDeleteArray(&deleteArray__mets_);
      instance.SetDestructor(&destruct__mets_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_mets_*)
   {
      return GenerateInitInstanceLocal((::_mets_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_mets_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _dileadingjets__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__dileadingjets_(void *p = 0);
   static void *newArray__dileadingjets_(Long_t size, void *p);
   static void delete__dileadingjets_(void *p);
   static void deleteArray__dileadingjets_(void *p);
   static void destruct__dileadingjets_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_dileadingjets_*)
   {
      ::_dileadingjets_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_dileadingjets_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_dileadingjets_", ::_dileadingjets_::Class_Version(), "./kinematics.h", 473,
                  typeid(::_dileadingjets_), DefineBehavior(ptr, ptr),
                  &::_dileadingjets_::Dictionary, isa_proxy, 4,
                  sizeof(::_dileadingjets_) );
      instance.SetNew(&new__dileadingjets_);
      instance.SetNewArray(&newArray__dileadingjets_);
      instance.SetDelete(&delete__dileadingjets_);
      instance.SetDeleteArray(&deleteArray__dileadingjets_);
      instance.SetDestructor(&destruct__dileadingjets_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_dileadingjets_*)
   {
      return GenerateInitInstanceLocal((::_dileadingjets_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_dileadingjets_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _run_info__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__run_info_(void *p = 0);
   static void *newArray__run_info_(Long_t size, void *p);
   static void delete__run_info_(void *p);
   static void deleteArray__run_info_(void *p);
   static void destruct__run_info_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_run_info_*)
   {
      ::_run_info_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_run_info_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_run_info_", ::_run_info_::Class_Version(), "./kinematics.h", 499,
                  typeid(::_run_info_), DefineBehavior(ptr, ptr),
                  &::_run_info_::Dictionary, isa_proxy, 4,
                  sizeof(::_run_info_) );
      instance.SetNew(&new__run_info_);
      instance.SetNewArray(&newArray__run_info_);
      instance.SetDelete(&delete__run_info_);
      instance.SetDeleteArray(&deleteArray__run_info_);
      instance.SetDestructor(&destruct__run_info_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_run_info_*)
   {
      return GenerateInitInstanceLocal((::_run_info_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_run_info_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _vertex__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__vertex_(void *p = 0);
   static void *newArray__vertex_(Long_t size, void *p);
   static void delete__vertex_(void *p);
   static void deleteArray__vertex_(void *p);
   static void destruct__vertex_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_vertex_*)
   {
      ::_vertex_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_vertex_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_vertex_", ::_vertex_::Class_Version(), "./kinematics.h", 514,
                  typeid(::_vertex_), DefineBehavior(ptr, ptr),
                  &::_vertex_::Dictionary, isa_proxy, 4,
                  sizeof(::_vertex_) );
      instance.SetNew(&new__vertex_);
      instance.SetNewArray(&newArray__vertex_);
      instance.SetDelete(&delete__vertex_);
      instance.SetDeleteArray(&deleteArray__vertex_);
      instance.SetDestructor(&destruct__vertex_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_vertex_*)
   {
      return GenerateInitInstanceLocal((::_vertex_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_vertex_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _l1_obj__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__l1_obj_(void *p = 0);
   static void *newArray__l1_obj_(Long_t size, void *p);
   static void delete__l1_obj_(void *p);
   static void deleteArray__l1_obj_(void *p);
   static void destruct__l1_obj_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_l1_obj_*)
   {
      ::_l1_obj_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_l1_obj_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_l1_obj_", ::_l1_obj_::Class_Version(), "./kinematics.h", 546,
                  typeid(::_l1_obj_), DefineBehavior(ptr, ptr),
                  &::_l1_obj_::Dictionary, isa_proxy, 4,
                  sizeof(::_l1_obj_) );
      instance.SetNew(&new__l1_obj_);
      instance.SetNewArray(&newArray__l1_obj_);
      instance.SetDelete(&delete__l1_obj_);
      instance.SetDeleteArray(&deleteArray__l1_obj_);
      instance.SetDestructor(&destruct__l1_obj_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_l1_obj_*)
   {
      return GenerateInitInstanceLocal((::_l1_obj_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_l1_obj_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _supercluster__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__supercluster_(void *p = 0);
   static void *newArray__supercluster_(Long_t size, void *p);
   static void delete__supercluster_(void *p);
   static void deleteArray__supercluster_(void *p);
   static void destruct__supercluster_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_supercluster_*)
   {
      ::_supercluster_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_supercluster_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_supercluster_", ::_supercluster_::Class_Version(), "./kinematics.h", 567,
                  typeid(::_supercluster_), DefineBehavior(ptr, ptr),
                  &::_supercluster_::Dictionary, isa_proxy, 4,
                  sizeof(::_supercluster_) );
      instance.SetNew(&new__supercluster_);
      instance.SetNewArray(&newArray__supercluster_);
      instance.SetDelete(&delete__supercluster_);
      instance.SetDeleteArray(&deleteArray__supercluster_);
      instance.SetDestructor(&destruct__supercluster_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_supercluster_*)
   {
      return GenerateInitInstanceLocal((::_supercluster_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_supercluster_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _photon__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__photon_(void *p = 0);
   static void *newArray__photon_(Long_t size, void *p);
   static void delete__photon_(void *p);
   static void deleteArray__photon_(void *p);
   static void destruct__photon_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_photon_*)
   {
      ::_photon_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_photon_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_photon_", ::_photon_::Class_Version(), "./kinematics.h", 601,
                  typeid(::_photon_), DefineBehavior(ptr, ptr),
                  &::_photon_::Dictionary, isa_proxy, 4,
                  sizeof(::_photon_) );
      instance.SetNew(&new__photon_);
      instance.SetNewArray(&newArray__photon_);
      instance.SetDelete(&delete__photon_);
      instance.SetDeleteArray(&deleteArray__photon_);
      instance.SetDestructor(&destruct__photon_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_photon_*)
   {
      return GenerateInitInstanceLocal((::_photon_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_photon_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _electron__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__electron_(void *p = 0);
   static void *newArray__electron_(Long_t size, void *p);
   static void delete__electron_(void *p);
   static void deleteArray__electron_(void *p);
   static void destruct__electron_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_electron_*)
   {
      ::_electron_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_electron_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_electron_", ::_electron_::Class_Version(), "./kinematics.h", 660,
                  typeid(::_electron_), DefineBehavior(ptr, ptr),
                  &::_electron_::Dictionary, isa_proxy, 4,
                  sizeof(::_electron_) );
      instance.SetNew(&new__electron_);
      instance.SetNewArray(&newArray__electron_);
      instance.SetDelete(&delete__electron_);
      instance.SetDeleteArray(&deleteArray__electron_);
      instance.SetDestructor(&destruct__electron_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_electron_*)
   {
      return GenerateInitInstanceLocal((::_electron_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_electron_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _beam_spot__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__beam_spot_(void *p = 0);
   static void *newArray__beam_spot_(Long_t size, void *p);
   static void delete__beam_spot_(void *p);
   static void deleteArray__beam_spot_(void *p);
   static void destruct__beam_spot_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_beam_spot_*)
   {
      ::_beam_spot_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_beam_spot_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_beam_spot_", ::_beam_spot_::Class_Version(), "./kinematics.h", 789,
                  typeid(::_beam_spot_), DefineBehavior(ptr, ptr),
                  &::_beam_spot_::Dictionary, isa_proxy, 4,
                  sizeof(::_beam_spot_) );
      instance.SetNew(&new__beam_spot_);
      instance.SetNewArray(&newArray__beam_spot_);
      instance.SetDelete(&delete__beam_spot_);
      instance.SetDeleteArray(&deleteArray__beam_spot_);
      instance.SetDestructor(&destruct__beam_spot_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_beam_spot_*)
   {
      return GenerateInitInstanceLocal((::_beam_spot_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_beam_spot_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _muon__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__muon_(void *p = 0);
   static void *newArray__muon_(Long_t size, void *p);
   static void delete__muon_(void *p);
   static void deleteArray__muon_(void *p);
   static void destruct__muon_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_muon_*)
   {
      ::_muon_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_muon_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_muon_", ::_muon_::Class_Version(), "./kinematics.h", 811,
                  typeid(::_muon_), DefineBehavior(ptr, ptr),
                  &::_muon_::Dictionary, isa_proxy, 4,
                  sizeof(::_muon_) );
      instance.SetNew(&new__muon_);
      instance.SetNewArray(&newArray__muon_);
      instance.SetDelete(&delete__muon_);
      instance.SetDeleteArray(&deleteArray__muon_);
      instance.SetDestructor(&destruct__muon_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_muon_*)
   {
      return GenerateInitInstanceLocal((::_muon_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_muon_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _gen_jet__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__gen_jet_(void *p = 0);
   static void *newArray__gen_jet_(Long_t size, void *p);
   static void delete__gen_jet_(void *p);
   static void deleteArray__gen_jet_(void *p);
   static void destruct__gen_jet_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_gen_jet_*)
   {
      ::_gen_jet_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_gen_jet_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_gen_jet_", ::_gen_jet_::Class_Version(), "./kinematics.h", 904,
                  typeid(::_gen_jet_), DefineBehavior(ptr, ptr),
                  &::_gen_jet_::Dictionary, isa_proxy, 4,
                  sizeof(::_gen_jet_) );
      instance.SetNew(&new__gen_jet_);
      instance.SetNewArray(&newArray__gen_jet_);
      instance.SetDelete(&delete__gen_jet_);
      instance.SetDeleteArray(&deleteArray__gen_jet_);
      instance.SetDestructor(&destruct__gen_jet_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_gen_jet_*)
   {
      return GenerateInitInstanceLocal((::_gen_jet_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_gen_jet_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _jet__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__jet_(void *p = 0);
   static void *newArray__jet_(Long_t size, void *p);
   static void delete__jet_(void *p);
   static void deleteArray__jet_(void *p);
   static void destruct__jet_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_jet_*)
   {
      ::_jet_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_jet_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_jet_", ::_jet_::Class_Version(), "./kinematics.h", 922,
                  typeid(::_jet_), DefineBehavior(ptr, ptr),
                  &::_jet_::Dictionary, isa_proxy, 4,
                  sizeof(::_jet_) );
      instance.SetNew(&new__jet_);
      instance.SetNewArray(&newArray__jet_);
      instance.SetDelete(&delete__jet_);
      instance.SetDeleteArray(&deleteArray__jet_);
      instance.SetDestructor(&destruct__jet_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_jet_*)
   {
      return GenerateInitInstanceLocal((::_jet_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_jet_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _di_jet__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__di_jet_(void *p = 0);
   static void *newArray__di_jet_(Long_t size, void *p);
   static void delete__di_jet_(void *p);
   static void deleteArray__di_jet_(void *p);
   static void destruct__di_jet_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_di_jet_*)
   {
      ::_di_jet_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_di_jet_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_di_jet_", ::_di_jet_::Class_Version(), "./kinematics.h", 1015,
                  typeid(::_di_jet_), DefineBehavior(ptr, ptr),
                  &::_di_jet_::Dictionary, isa_proxy, 4,
                  sizeof(::_di_jet_) );
      instance.SetNew(&new__di_jet_);
      instance.SetNewArray(&newArray__di_jet_);
      instance.SetDelete(&delete__di_jet_);
      instance.SetDeleteArray(&deleteArray__di_jet_);
      instance.SetDestructor(&destruct__di_jet_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_di_jet_*)
   {
      return GenerateInitInstanceLocal((::_di_jet_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_di_jet_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _W__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__W_(void *p = 0);
   static void *newArray__W_(Long_t size, void *p);
   static void delete__W_(void *p);
   static void deleteArray__W_(void *p);
   static void destruct__W_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_W_*)
   {
      ::_W_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_W_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_W_", ::_W_::Class_Version(), "./kinematics.h", 1044,
                  typeid(::_W_), DefineBehavior(ptr, ptr),
                  &::_W_::Dictionary, isa_proxy, 4,
                  sizeof(::_W_) );
      instance.SetNew(&new__W_);
      instance.SetNewArray(&newArray__W_);
      instance.SetDelete(&delete__W_);
      instance.SetDeleteArray(&deleteArray__W_);
      instance.SetDestructor(&destruct__W_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_W_*)
   {
      return GenerateInitInstanceLocal((::_W_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_W_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _di_lepton__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__di_lepton_(void *p = 0);
   static void *newArray__di_lepton_(Long_t size, void *p);
   static void delete__di_lepton_(void *p);
   static void deleteArray__di_lepton_(void *p);
   static void destruct__di_lepton_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_di_lepton_*)
   {
      ::_di_lepton_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_di_lepton_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_di_lepton_", ::_di_lepton_::Class_Version(), "./kinematics.h", 1065,
                  typeid(::_di_lepton_), DefineBehavior(ptr, ptr),
                  &::_di_lepton_::Dictionary, isa_proxy, 4,
                  sizeof(::_di_lepton_) );
      instance.SetNew(&new__di_lepton_);
      instance.SetNewArray(&newArray__di_lepton_);
      instance.SetDelete(&delete__di_lepton_);
      instance.SetDeleteArray(&deleteArray__di_lepton_);
      instance.SetDestructor(&destruct__di_lepton_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_di_lepton_*)
   {
      return GenerateInitInstanceLocal((::_di_lepton_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_di_lepton_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _tri_lepton__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__tri_lepton_(void *p = 0);
   static void *newArray__tri_lepton_(Long_t size, void *p);
   static void delete__tri_lepton_(void *p);
   static void deleteArray__tri_lepton_(void *p);
   static void destruct__tri_lepton_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_tri_lepton_*)
   {
      ::_tri_lepton_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_tri_lepton_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_tri_lepton_", ::_tri_lepton_::Class_Version(), "./kinematics.h", 1115,
                  typeid(::_tri_lepton_), DefineBehavior(ptr, ptr),
                  &::_tri_lepton_::Dictionary, isa_proxy, 4,
                  sizeof(::_tri_lepton_) );
      instance.SetNew(&new__tri_lepton_);
      instance.SetNewArray(&newArray__tri_lepton_);
      instance.SetDelete(&delete__tri_lepton_);
      instance.SetDeleteArray(&deleteArray__tri_lepton_);
      instance.SetDestructor(&destruct__tri_lepton_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_tri_lepton_*)
   {
      return GenerateInitInstanceLocal((::_tri_lepton_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_tri_lepton_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _quar_lepton__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__quar_lepton_(void *p = 0);
   static void *newArray__quar_lepton_(Long_t size, void *p);
   static void delete__quar_lepton_(void *p);
   static void deleteArray__quar_lepton_(void *p);
   static void destruct__quar_lepton_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_quar_lepton_*)
   {
      ::_quar_lepton_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_quar_lepton_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_quar_lepton_", ::_quar_lepton_::Class_Version(), "./kinematics.h", 1139,
                  typeid(::_quar_lepton_), DefineBehavior(ptr, ptr),
                  &::_quar_lepton_::Dictionary, isa_proxy, 4,
                  sizeof(::_quar_lepton_) );
      instance.SetNew(&new__quar_lepton_);
      instance.SetNewArray(&newArray__quar_lepton_);
      instance.SetDelete(&delete__quar_lepton_);
      instance.SetDeleteArray(&deleteArray__quar_lepton_);
      instance.SetDestructor(&destruct__quar_lepton_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_quar_lepton_*)
   {
      return GenerateInitInstanceLocal((::_quar_lepton_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_quar_lepton_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _lepton_photon__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__lepton_photon_(void *p = 0);
   static void *newArray__lepton_photon_(Long_t size, void *p);
   static void delete__lepton_photon_(void *p);
   static void deleteArray__lepton_photon_(void *p);
   static void destruct__lepton_photon_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_lepton_photon_*)
   {
      ::_lepton_photon_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_lepton_photon_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_lepton_photon_", ::_lepton_photon_::Class_Version(), "./kinematics.h", 1163,
                  typeid(::_lepton_photon_), DefineBehavior(ptr, ptr),
                  &::_lepton_photon_::Dictionary, isa_proxy, 4,
                  sizeof(::_lepton_photon_) );
      instance.SetNew(&new__lepton_photon_);
      instance.SetNewArray(&newArray__lepton_photon_);
      instance.SetDelete(&delete__lepton_photon_);
      instance.SetDeleteArray(&deleteArray__lepton_photon_);
      instance.SetDestructor(&destruct__lepton_photon_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_lepton_photon_*)
   {
      return GenerateInitInstanceLocal((::_lepton_photon_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_lepton_photon_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _dilepton_photon__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__dilepton_photon_(void *p = 0);
   static void *newArray__dilepton_photon_(Long_t size, void *p);
   static void delete__dilepton_photon_(void *p);
   static void deleteArray__dilepton_photon_(void *p);
   static void destruct__dilepton_photon_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_dilepton_photon_*)
   {
      ::_dilepton_photon_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_dilepton_photon_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_dilepton_photon_", ::_dilepton_photon_::Class_Version(), "./kinematics.h", 1187,
                  typeid(::_dilepton_photon_), DefineBehavior(ptr, ptr),
                  &::_dilepton_photon_::Dictionary, isa_proxy, 4,
                  sizeof(::_dilepton_photon_) );
      instance.SetNew(&new__dilepton_photon_);
      instance.SetNewArray(&newArray__dilepton_photon_);
      instance.SetDelete(&delete__dilepton_photon_);
      instance.SetDeleteArray(&deleteArray__dilepton_photon_);
      instance.SetDestructor(&destruct__dilepton_photon_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_dilepton_photon_*)
   {
      return GenerateInitInstanceLocal((::_dilepton_photon_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_dilepton_photon_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void _event__ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new__event_(void *p = 0);
   static void *newArray__event_(Long_t size, void *p);
   static void delete__event_(void *p);
   static void deleteArray__event_(void *p);
   static void destruct__event_(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::_event_*)
   {
      ::_event_ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::_event_ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("_event_", ::_event_::Class_Version(), "./kinematics.h", 1221,
                  typeid(::_event_), DefineBehavior(ptr, ptr),
                  &::_event_::Dictionary, isa_proxy, 4,
                  sizeof(::_event_) );
      instance.SetNew(&new__event_);
      instance.SetNewArray(&newArray__event_);
      instance.SetDelete(&delete__event_);
      instance.SetDeleteArray(&deleteArray__event_);
      instance.SetDestructor(&destruct__event_);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::_event_*)
   {
      return GenerateInitInstanceLocal((::_event_*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::_event_*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *_event_filterBit_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_event_filterBit_::Class_Name()
{
   return "_event_filterBit_";
}

//______________________________________________________________________________
const char *_event_filterBit_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_event_filterBit_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _event_filterBit_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_event_filterBit_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _event_filterBit_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_event_filterBit_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_event_filterBit_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_event_filterBit_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_gen_eventInfo_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_gen_eventInfo_::Class_Name()
{
   return "_gen_eventInfo_";
}

//______________________________________________________________________________
const char *_gen_eventInfo_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_eventInfo_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _gen_eventInfo_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_eventInfo_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _gen_eventInfo_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_eventInfo_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_gen_eventInfo_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_eventInfo_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_mc_process_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_mc_process_::Class_Name()
{
   return "_mc_process_";
}

//______________________________________________________________________________
const char *_mc_process_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_mc_process_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _mc_process_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_mc_process_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _mc_process_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_mc_process_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_mc_process_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_mc_process_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_gen_ttbar_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_gen_ttbar_::Class_Name()
{
   return "_gen_ttbar_";
}

//______________________________________________________________________________
const char *_gen_ttbar_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_ttbar_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _gen_ttbar_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_ttbar_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _gen_ttbar_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_ttbar_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_gen_ttbar_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_ttbar_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_gen_DrellYan_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_gen_DrellYan_::Class_Name()
{
   return "_gen_DrellYan_";
}

//______________________________________________________________________________
const char *_gen_DrellYan_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_DrellYan_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _gen_DrellYan_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_DrellYan_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _gen_DrellYan_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_DrellYan_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_gen_DrellYan_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_DrellYan_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_genwz_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_genwz_::Class_Name()
{
   return "_genwz_";
}

//______________________________________________________________________________
const char *_genwz_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_genwz_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _genwz_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_genwz_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _genwz_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_genwz_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_genwz_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_genwz_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_vec4_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_vec4_::Class_Name()
{
   return "_vec4_";
}

//______________________________________________________________________________
const char *_vec4_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_vec4_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _vec4_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_vec4_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _vec4_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_vec4_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_vec4_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_vec4_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_met_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_met_::Class_Name()
{
   return "_met_";
}

//______________________________________________________________________________
const char *_met_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_met_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _met_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_met_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _met_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_met_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_met_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_met_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_track_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_track_::Class_Name()
{
   return "_track_";
}

//______________________________________________________________________________
const char *_track_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_track_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _track_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_track_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _track_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_track_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_track_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_track_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_trg_bits_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_trg_bits_::Class_Name()
{
   return "_trg_bits_";
}

//______________________________________________________________________________
const char *_trg_bits_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_trg_bits_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _trg_bits_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_trg_bits_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _trg_bits_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_trg_bits_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_trg_bits_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_trg_bits_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_hlt_info_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_hlt_info_::Class_Name()
{
   return "_hlt_info_";
}

//______________________________________________________________________________
const char *_hlt_info_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_hlt_info_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _hlt_info_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_hlt_info_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _hlt_info_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_hlt_info_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_hlt_info_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_hlt_info_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_mets_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_mets_::Class_Name()
{
   return "_mets_";
}

//______________________________________________________________________________
const char *_mets_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_mets_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _mets_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_mets_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _mets_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_mets_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_mets_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_mets_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_dileadingjets_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_dileadingjets_::Class_Name()
{
   return "_dileadingjets_";
}

//______________________________________________________________________________
const char *_dileadingjets_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_dileadingjets_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _dileadingjets_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_dileadingjets_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _dileadingjets_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_dileadingjets_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_dileadingjets_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_dileadingjets_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_run_info_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_run_info_::Class_Name()
{
   return "_run_info_";
}

//______________________________________________________________________________
const char *_run_info_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_run_info_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _run_info_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_run_info_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _run_info_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_run_info_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_run_info_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_run_info_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_vertex_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_vertex_::Class_Name()
{
   return "_vertex_";
}

//______________________________________________________________________________
const char *_vertex_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_vertex_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _vertex_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_vertex_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _vertex_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_vertex_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_vertex_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_vertex_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_l1_obj_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_l1_obj_::Class_Name()
{
   return "_l1_obj_";
}

//______________________________________________________________________________
const char *_l1_obj_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_l1_obj_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _l1_obj_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_l1_obj_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _l1_obj_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_l1_obj_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_l1_obj_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_l1_obj_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_supercluster_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_supercluster_::Class_Name()
{
   return "_supercluster_";
}

//______________________________________________________________________________
const char *_supercluster_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_supercluster_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _supercluster_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_supercluster_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _supercluster_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_supercluster_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_supercluster_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_supercluster_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_photon_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_photon_::Class_Name()
{
   return "_photon_";
}

//______________________________________________________________________________
const char *_photon_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_photon_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _photon_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_photon_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _photon_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_photon_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_photon_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_photon_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_electron_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_electron_::Class_Name()
{
   return "_electron_";
}

//______________________________________________________________________________
const char *_electron_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_electron_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _electron_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_electron_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _electron_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_electron_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_electron_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_electron_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_beam_spot_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_beam_spot_::Class_Name()
{
   return "_beam_spot_";
}

//______________________________________________________________________________
const char *_beam_spot_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_beam_spot_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _beam_spot_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_beam_spot_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _beam_spot_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_beam_spot_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_beam_spot_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_beam_spot_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_muon_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_muon_::Class_Name()
{
   return "_muon_";
}

//______________________________________________________________________________
const char *_muon_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_muon_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _muon_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_muon_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _muon_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_muon_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_muon_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_muon_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_gen_jet_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_gen_jet_::Class_Name()
{
   return "_gen_jet_";
}

//______________________________________________________________________________
const char *_gen_jet_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_jet_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _gen_jet_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_gen_jet_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _gen_jet_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_jet_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_gen_jet_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_gen_jet_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_jet_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_jet_::Class_Name()
{
   return "_jet_";
}

//______________________________________________________________________________
const char *_jet_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_jet_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _jet_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_jet_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _jet_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_jet_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_jet_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_jet_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_di_jet_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_di_jet_::Class_Name()
{
   return "_di_jet_";
}

//______________________________________________________________________________
const char *_di_jet_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_di_jet_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _di_jet_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_di_jet_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _di_jet_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_di_jet_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_di_jet_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_di_jet_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_W_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_W_::Class_Name()
{
   return "_W_";
}

//______________________________________________________________________________
const char *_W_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_W_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _W_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_W_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _W_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_W_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_W_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_W_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_di_lepton_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_di_lepton_::Class_Name()
{
   return "_di_lepton_";
}

//______________________________________________________________________________
const char *_di_lepton_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_di_lepton_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _di_lepton_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_di_lepton_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _di_lepton_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_di_lepton_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_di_lepton_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_di_lepton_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_tri_lepton_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_tri_lepton_::Class_Name()
{
   return "_tri_lepton_";
}

//______________________________________________________________________________
const char *_tri_lepton_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_tri_lepton_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _tri_lepton_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_tri_lepton_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _tri_lepton_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_tri_lepton_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_tri_lepton_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_tri_lepton_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_quar_lepton_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_quar_lepton_::Class_Name()
{
   return "_quar_lepton_";
}

//______________________________________________________________________________
const char *_quar_lepton_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_quar_lepton_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _quar_lepton_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_quar_lepton_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _quar_lepton_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_quar_lepton_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_quar_lepton_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_quar_lepton_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_lepton_photon_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_lepton_photon_::Class_Name()
{
   return "_lepton_photon_";
}

//______________________________________________________________________________
const char *_lepton_photon_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_lepton_photon_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _lepton_photon_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_lepton_photon_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _lepton_photon_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_lepton_photon_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_lepton_photon_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_lepton_photon_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_dilepton_photon_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_dilepton_photon_::Class_Name()
{
   return "_dilepton_photon_";
}

//______________________________________________________________________________
const char *_dilepton_photon_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_dilepton_photon_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _dilepton_photon_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_dilepton_photon_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _dilepton_photon_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_dilepton_photon_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_dilepton_photon_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_dilepton_photon_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *_event_::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *_event_::Class_Name()
{
   return "_event_";
}

//______________________________________________________________________________
const char *_event_::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_event_*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int _event_::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::_event_*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void _event_::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_event_*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *_event_::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::_event_*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void _event_filterBit_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _event_filterBit_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_event_filterBit_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_event_filterBit_::Class(),this);
   }
}

//______________________________________________________________________________
void _event_filterBit_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _event_filterBit_.
      TClass *R__cl = ::_event_filterBit_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackingFailureFilter", &trackingFailureFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EcalDeadCellTriggerPrimitiveFilter", &EcalDeadCellTriggerPrimitiveFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalLaserCorrFilter", &ecalLaserCorrFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eeBadScFilter", &eeBadScFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalLaserEventFilter", &hcalLaserEventFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CSCTightHaloFilter", &CSCTightHaloFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genericFilter0", &genericFilter0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genericFilter1", &genericFilter1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genericFilter2", &genericFilter2);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__event_filterBit_(void *p) {
      return  p ? new(p) ::_event_filterBit_ : new ::_event_filterBit_;
   }
   static void *newArray__event_filterBit_(Long_t nElements, void *p) {
      return p ? new(p) ::_event_filterBit_[nElements] : new ::_event_filterBit_[nElements];
   }
   // Wrapper around operator delete
   static void delete__event_filterBit_(void *p) {
      delete ((::_event_filterBit_*)p);
   }
   static void deleteArray__event_filterBit_(void *p) {
      delete [] ((::_event_filterBit_*)p);
   }
   static void destruct__event_filterBit_(void *p) {
      typedef ::_event_filterBit_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_event_filterBit_

//______________________________________________________________________________
void _gen_eventInfo_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _gen_eventInfo_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_gen_eventInfo_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_gen_eventInfo_::Class(),this);
   }
}

//______________________________________________________________________________
void _gen_eventInfo_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _gen_eventInfo_.
      TClass *R__cl = ::_gen_eventInfo_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flav1", &flav1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flav2", &flav2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfx1", &xfx1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfx2", &xfx2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scalePDF", &scalePDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight", &weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalProcessID", &signalProcessID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qScale", &qScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaQCD", &alphaQCD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaQED", &alphaQED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPDF", &hasPDF);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__gen_eventInfo_(void *p) {
      return  p ? new(p) ::_gen_eventInfo_ : new ::_gen_eventInfo_;
   }
   static void *newArray__gen_eventInfo_(Long_t nElements, void *p) {
      return p ? new(p) ::_gen_eventInfo_[nElements] : new ::_gen_eventInfo_[nElements];
   }
   // Wrapper around operator delete
   static void delete__gen_eventInfo_(void *p) {
      delete ((::_gen_eventInfo_*)p);
   }
   static void deleteArray__gen_eventInfo_(void *p) {
      delete [] ((::_gen_eventInfo_*)p);
   }
   static void destruct__gen_eventInfo_(void *p) {
      typedef ::_gen_eventInfo_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_gen_eventInfo_

//______________________________________________________________________________
void _gen_ttbar_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _gen_ttbar_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_gen_ttbar_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_gen_ttbar_::Class(),this);
   }
}

//______________________________________________________________________________
void _gen_ttbar_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _gen_ttbar_.
      TClass *R__cl = ::_gen_ttbar_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ttbarPt", &ttbarPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ttbarM", &ttbarM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ttbarEta", &ttbarEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ttbarPhi", &ttbarPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1Pt", &mom1Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1Eta", &mom1Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1M", &mom1M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1Phi", &mom1Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1ID", &mom1ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2Pt", &mom2Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2Eta", &mom2Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2M", &mom2M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2Phi", &mom2Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2ID", &mom2ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tPt", &tPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tM", &tM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tEta", &tEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tPhi", &tPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tID", &tID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twPt", &twPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twM", &twM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twEta", &twEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twPhi", &twPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twID", &twID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twlPt", &twlPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twlM", &twlM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twlEta", &twlEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twlPhi", &twlPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twlID", &twlID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twvPt", &twvPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twvM", &twvM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twvEta", &twvEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twvPhi", &twvPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twvID", &twvID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbPt", &tbPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbM", &tbM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbEta", &tbEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbPhi", &tbPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbID", &tbID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tjPt", &tjPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tjM", &tjM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tjEta", &tjEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tjPhi", &tjPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tjID", &tjID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarPt", &tbarPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarM", &tbarM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarEta", &tbarEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarPhi", &tbarPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarID", &tbarID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwPt", &tbarwPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwM", &tbarwM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwEta", &tbarwEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwPhi", &tbarwPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwID", &tbarwID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwlPt", &tbarwlPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwlM", &tbarwlM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwlEta", &tbarwlEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwlPhi", &tbarwlPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwlID", &tbarwlID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwvPt", &tbarwvPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwvM", &tbarwvM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwvEta", &tbarwvEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwvPhi", &tbarwvPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarwvID", &tbarwvID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarbPt", &tbarbPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarbM", &tbarbM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarbEta", &tbarbEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarbPhi", &tbarbPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarbID", &tbarbID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarjPt", &tbarjPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarjM", &tbarjM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarjEta", &tbarjEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarjPhi", &tbarjPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tbarjID", &tbarjID);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__gen_ttbar_(void *p) {
      return  p ? new(p) ::_gen_ttbar_ : new ::_gen_ttbar_;
   }
   static void *newArray__gen_ttbar_(Long_t nElements, void *p) {
      return p ? new(p) ::_gen_ttbar_[nElements] : new ::_gen_ttbar_[nElements];
   }
   // Wrapper around operator delete
   static void delete__gen_ttbar_(void *p) {
      delete ((::_gen_ttbar_*)p);
   }
   static void deleteArray__gen_ttbar_(void *p) {
      delete [] ((::_gen_ttbar_*)p);
   }
   static void destruct__gen_ttbar_(void *p) {
      typedef ::_gen_ttbar_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_gen_ttbar_

//______________________________________________________________________________
void _gen_DrellYan_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _gen_DrellYan_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_gen_DrellYan_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_gen_DrellYan_::Class(),this);
   }
}

//______________________________________________________________________________
void _gen_DrellYan_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _gen_DrellYan_.
      TClass *R__cl = ::_gen_DrellYan_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1Pt", &mom1Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1Eta", &mom1Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1M", &mom1M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1Phi", &mom1Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom1ID", &mom1ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2Pt", &mom2Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2Eta", &mom2Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2M", &mom2M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2Phi", &mom2Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom2ID", &mom2ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosPt", &bosPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosEta", &bosEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosM", &bosM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosPhi", &bosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosID", &bosID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugPt", &pdaugPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugEta", &pdaugEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugM", &pdaugM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugPhi", &pdaugPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugID", &pdaugID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugPtFSR", &pdaugPtFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugEtaFSR", &pdaugEtaFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugMFSR", &pdaugMFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugPhiFSR", &pdaugPhiFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugPtDress", &pdaugPtDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugEtaDress", &pdaugEtaDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugMDress", &pdaugMDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdaugPhiDress", &pdaugPhiDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugPt", &mdaugPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugEta", &mdaugEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugM", &mdaugM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugPhi", &mdaugPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugID", &mdaugID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugPtFSR", &mdaugPtFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugEtaFSR", &mdaugEtaFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugMFSR", &mdaugMFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugPhiFSR", &mdaugPhiFSR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugPtDress", &mdaugPtDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugEtaDress", &mdaugEtaDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugMDress", &mdaugMDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdaugPhiDress", &mdaugPhiDress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfJets", &numberOfJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jpid[6]", jpid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jv4[6][4]", jv4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfParticles", &numOfParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mev4[12][5]", mev4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mepid[12]", mepid);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__gen_DrellYan_(void *p) {
      return  p ? new(p) ::_gen_DrellYan_ : new ::_gen_DrellYan_;
   }
   static void *newArray__gen_DrellYan_(Long_t nElements, void *p) {
      return p ? new(p) ::_gen_DrellYan_[nElements] : new ::_gen_DrellYan_[nElements];
   }
   // Wrapper around operator delete
   static void delete__gen_DrellYan_(void *p) {
      delete ((::_gen_DrellYan_*)p);
   }
   static void deleteArray__gen_DrellYan_(void *p) {
      delete [] ((::_gen_DrellYan_*)p);
   }
   static void destruct__gen_DrellYan_(void *p) {
      typedef ::_gen_DrellYan_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_gen_DrellYan_

//______________________________________________________________________________
void _mc_process_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _mc_process_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_mc_process_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_mc_process_::Class(),this);
   }
}

//______________________________________________________________________________
void _mc_process_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _mc_process_.
      TClass *R__cl = ::_mc_process_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mpi", &mpi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "processId", &processId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNumber", &eventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxBarcode", &vtxBarcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventScale", &eventScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaQCD", &alphaQCD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaQED", &alphaQED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flav1", &flav1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flav2", &flav2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfx1", &xfx1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfx2", &xfx2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scalePDF", &scalePDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayType", &decayType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosId", &bosId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosPt", &bosPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosPz", &bosPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosMass", &bosMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosEta", &bosEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosPhi", &bosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bosRap", &bosRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonPt", &dileptonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonPz", &dileptonPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonMass", &dileptonMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonEta", &dileptonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonPhi", &dileptonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonRap", &dileptonRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosTheta", &cosTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosPhi", &cosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nphotons", &nphotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonEnergy", &muonEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonPt", &muonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonPz", &muonPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonEta", &muonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonPhi", &muonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonId", &muonId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonBarEnergy", &muonBarEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonBarPt", &muonBarPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonBarPz", &muonBarPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonBarEta", &muonBarEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonBarPhi", &muonBarPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonBarId", &muonBarId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonEnergy", &nrmuonEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonPt", &nrmuonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonPz", &nrmuonPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonEta", &nrmuonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonPhi", &nrmuonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonId", &nrmuonId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonBarEnergy", &nrmuonBarEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonBarPt", &nrmuonBarPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonBarPz", &nrmuonBarPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonBarEta", &nrmuonBarEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonBarPhi", &nrmuonBarPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrmuonBarId", &nrmuonBarId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEnergy", &photonEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonPhi", &photonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEta", &photonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonAngle", &photonAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosThetaCS", &cosThetaCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sin2ThetaCS", &sin2ThetaCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanPhiCS", &tanPhiCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corCosThetaCS", &corCosThetaCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corSin2ThetaCS", &corSin2ThetaCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corTanPhiCS", &corTanPhiCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sameSign", &sameSign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qqbar", &qqbar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qbarq", &qbarq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mistag", &mistag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metX", &metX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metY", &metY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta", &delta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fprob", &fprob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bprob", &bprob);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__mc_process_(void *p) {
      return  p ? new(p) ::_mc_process_ : new ::_mc_process_;
   }
   static void *newArray__mc_process_(Long_t nElements, void *p) {
      return p ? new(p) ::_mc_process_[nElements] : new ::_mc_process_[nElements];
   }
   // Wrapper around operator delete
   static void delete__mc_process_(void *p) {
      delete ((::_mc_process_*)p);
   }
   static void deleteArray__mc_process_(void *p) {
      delete [] ((::_mc_process_*)p);
   }
   static void destruct__mc_process_(void *p) {
      typedef ::_mc_process_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_mc_process_

//______________________________________________________________________________
void _genwz_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _genwz_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_genwz_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_genwz_::Class(),this);
   }
}

//______________________________________________________________________________
void _genwz_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _genwz_.
      TClass *R__cl = ::_genwz_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_decayType", &Z_decayType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosId", &Z_bosId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosPt", &Z_bosPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosPz", &Z_bosPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosMass", &Z_bosMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosEta", &Z_bosEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosPhi", &Z_bosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_bosRap", &Z_bosRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauAEnergy", &Z_dauAEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauAPt", &Z_dauAPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauAPz", &Z_dauAPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauAEta", &Z_dauAEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauAPhi", &Z_dauAPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauAId", &Z_dauAId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauBEnergy", &Z_dauBEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauBPt", &Z_dauBPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauBPz", &Z_dauBPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauBEta", &Z_dauBEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauBPhi", &Z_dauBPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dauBId", &Z_dauBId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dileptonPt", &Z_dileptonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dileptonPz", &Z_dileptonPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dileptonMass", &Z_dileptonMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dileptonEta", &Z_dileptonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dileptonPhi", &Z_dileptonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_dileptonRap", &Z_dileptonRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_cosTheta", &Z_cosTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_cosPhi", &Z_cosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_nphotons", &Z_nphotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_phoEnergy", &Z_phoEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_phoPhi", &Z_phoPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_phoEta", &Z_phoEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_phoAngle", &Z_phoAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_decayType", &W_decayType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosId", &W_bosId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosPt", &W_bosPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosPz", &W_bosPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosMass", &W_bosMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosEta", &W_bosEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosPhi", &W_bosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_bosRap", &W_bosRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauAEnergy", &W_dauAEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauAPt", &W_dauAPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauAPz", &W_dauAPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauAEta", &W_dauAEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauAPhi", &W_dauAPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauAId", &W_dauAId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauBEnergy", &W_dauBEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauBPt", &W_dauBPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauBPz", &W_dauBPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauBEta", &W_dauBEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauBPhi", &W_dauBPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dauBId", &W_dauBId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dileptonPt", &W_dileptonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dileptonPz", &W_dileptonPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dileptonMass", &W_dileptonMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dileptonEta", &W_dileptonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dileptonPhi", &W_dileptonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_dileptonRap", &W_dileptonRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_cosTheta", &W_cosTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_cosPhi", &W_cosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_nphotons", &W_nphotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_phoEnergy", &W_phoEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_phoPhi", &W_phoPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_phoEta", &W_phoEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "W_phoAngle", &W_phoAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdWZ", &gdWZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_Pt", &WZ_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_Pz", &WZ_Pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_Mass", &WZ_Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_Eta", &WZ_Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_Phi", &WZ_Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_Rap", &WZ_Rap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_cosAngZ", &WZ_cosAngZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WZ_cosAngW", &WZ_cosAngW);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__genwz_(void *p) {
      return  p ? new(p) ::_genwz_ : new ::_genwz_;
   }
   static void *newArray__genwz_(Long_t nElements, void *p) {
      return p ? new(p) ::_genwz_[nElements] : new ::_genwz_[nElements];
   }
   // Wrapper around operator delete
   static void delete__genwz_(void *p) {
      delete ((::_genwz_*)p);
   }
   static void deleteArray__genwz_(void *p) {
      delete [] ((::_genwz_*)p);
   }
   static void destruct__genwz_(void *p) {
      typedef ::_genwz_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_genwz_

//______________________________________________________________________________
void _vec4_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _vec4_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_vec4_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_vec4_::Class(),this);
   }
}

//______________________________________________________________________________
void _vec4_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _vec4_.
      TClass *R__cl = ::_vec4_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__vec4_(void *p) {
      return  p ? new(p) ::_vec4_ : new ::_vec4_;
   }
   static void *newArray__vec4_(Long_t nElements, void *p) {
      return p ? new(p) ::_vec4_[nElements] : new ::_vec4_[nElements];
   }
   // Wrapper around operator delete
   static void delete__vec4_(void *p) {
      delete ((::_vec4_*)p);
   }
   static void deleteArray__vec4_(void *p) {
      delete [] ((::_vec4_*)p);
   }
   static void destruct__vec4_(void *p) {
      typedef ::_vec4_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_vec4_

//______________________________________________________________________________
void _trg_bits_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _trg_bits_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_trg_bits_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_trg_bits_::Class(),this);
   }
}

//______________________________________________________________________________
void _trg_bits_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _trg_bits_.
      TClass *R__cl = ::_trg_bits_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l1TrgBits[4]", l1TrgBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l1tTrgBits[4]", l1tTrgBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltAccTrgBits[4]", hltAccTrgBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltRunTrgBits[4]", hltRunTrgBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltErrTrgBits[4]", hltErrTrgBits);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__trg_bits_(void *p) {
      return  p ? new(p) ::_trg_bits_ : new ::_trg_bits_;
   }
   static void *newArray__trg_bits_(Long_t nElements, void *p) {
      return p ? new(p) ::_trg_bits_[nElements] : new ::_trg_bits_[nElements];
   }
   // Wrapper around operator delete
   static void delete__trg_bits_(void *p) {
      delete ((::_trg_bits_*)p);
   }
   static void deleteArray__trg_bits_(void *p) {
      delete [] ((::_trg_bits_*)p);
   }
   static void destruct__trg_bits_(void *p) {
      typedef ::_trg_bits_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_trg_bits_

//______________________________________________________________________________
void _hlt_info_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _hlt_info_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_hlt_info_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_hlt_info_::Class(),this);
   }
}

//______________________________________________________________________________
void _hlt_info_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _hlt_info_.
      TClass *R__cl = ::_hlt_info_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_NonIsoMuon", &HLT_NonIsoMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_Muon", &HLT_Muon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_MuonL", &HLT_MuonL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_MuonElectron", &HLT_MuonElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_ElectronMuon", &HLT_ElectronMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_NonIsoElectron", &HLT_NonIsoElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_Electron", &HLT_Electron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLT_ElectronL", &HLT_ElectronL);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__hlt_info_(void *p) {
      return  p ? new(p) ::_hlt_info_ : new ::_hlt_info_;
   }
   static void *newArray__hlt_info_(Long_t nElements, void *p) {
      return p ? new(p) ::_hlt_info_[nElements] : new ::_hlt_info_[nElements];
   }
   // Wrapper around operator delete
   static void delete__hlt_info_(void *p) {
      delete ((::_hlt_info_*)p);
   }
   static void deleteArray__hlt_info_(void *p) {
      delete [] ((::_hlt_info_*)p);
   }
   static void destruct__hlt_info_(void *p) {
      typedef ::_hlt_info_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_hlt_info_

//______________________________________________________________________________
void _met_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _met_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_met_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_met_::Class(),this);
   }
}

//______________________________________________________________________________
void _met_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _met_.
      TClass *R__cl = ::_met_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEt", &sumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_longitudinal", &e_longitudinal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HadronicEtFraction", &HadronicEtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EMEtFraction", &EMEtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MuonEtFraction", &MuonEtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "InvisibleEtFraction", &InvisibleEtFraction);
      _vec4_::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__met_(void *p) {
      return  p ? new(p) ::_met_ : new ::_met_;
   }
   static void *newArray__met_(Long_t nElements, void *p) {
      return p ? new(p) ::_met_[nElements] : new ::_met_[nElements];
   }
   // Wrapper around operator delete
   static void delete__met_(void *p) {
      delete ((::_met_*)p);
   }
   static void deleteArray__met_(void *p) {
      delete [] ((::_met_*)p);
   }
   static void destruct__met_(void *p) {
      typedef ::_met_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_met_

//______________________________________________________________________________
void _mets_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _mets_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_mets_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_mets_::Class(),this);
   }
}

//______________________________________________________________________________
void _mets_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _mets_.
      TClass *R__cl = ::_mets_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caloMET", &caloMET);
      R__insp.InspectMember(caloMET, "caloMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tcMET", &tcMET);
      R__insp.InspectMember(tcMET, "tcMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMET", &pfMET);
      R__insp.InspectMember(pfMET, "pfMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonJESCorSC5MET", &muonJESCorSC5MET);
      R__insp.InspectMember(muonJESCorSC5MET, "muonJESCorSC5MET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genMET", &genMET);
      R__insp.InspectMember(genMET, "genMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawMET", &rawMET);
      R__insp.InspectMember(rawMET, "rawMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfType1CorrectedMet", &pfType1CorrectedMet);
      R__insp.InspectMember(pfType1CorrectedMet, "pfType1CorrectedMet.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfType1p2CorrectedMet", &pfType1p2CorrectedMet);
      R__insp.InspectMember(pfType1p2CorrectedMet, "pfType1p2CorrectedMet.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMetT0pc", &pfMetT0pc);
      R__insp.InspectMember(pfMetT0pc, "pfMetT0pc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMetT0pcT1", &pfMetT0pcT1);
      R__insp.InspectMember(pfMetT0pcT1, "pfMetT0pcT1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMetT0pcTxy", &pfMetT0pcTxy);
      R__insp.InspectMember(pfMetT0pcTxy, "pfMetT0pcTxy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMetT0pcT1Txy", &pfMetT0pcT1Txy);
      R__insp.InspectMember(pfMetT0pcT1Txy, "pfMetT0pcT1Txy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMetT1", &pfMetT1);
      R__insp.InspectMember(pfMetT1, "pfMetT1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMetT1Txy", &pfMetT1Txy);
      R__insp.InspectMember(pfMetT1Txy, "pfMetT1Txy.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__mets_(void *p) {
      return  p ? new(p) ::_mets_ : new ::_mets_;
   }
   static void *newArray__mets_(Long_t nElements, void *p) {
      return p ? new(p) ::_mets_[nElements] : new ::_mets_[nElements];
   }
   // Wrapper around operator delete
   static void delete__mets_(void *p) {
      delete ((::_mets_*)p);
   }
   static void deleteArray__mets_(void *p) {
      delete [] ((::_mets_*)p);
   }
   static void destruct__mets_(void *p) {
      typedef ::_mets_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_mets_

//______________________________________________________________________________
void _dileadingjets_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _dileadingjets_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_dileadingjets_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_dileadingjets_::Class(),this);
   }
}

//______________________________________________________________________________
void _dileadingjets_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _dileadingjets_.
      TClass *R__cl = ::_dileadingjets_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtA", &daughtA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtB", &daughtB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtAType", &daughtAType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtBType", &daughtBType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptx", &ptx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pty", &pty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__dileadingjets_(void *p) {
      return  p ? new(p) ::_dileadingjets_ : new ::_dileadingjets_;
   }
   static void *newArray__dileadingjets_(Long_t nElements, void *p) {
      return p ? new(p) ::_dileadingjets_[nElements] : new ::_dileadingjets_[nElements];
   }
   // Wrapper around operator delete
   static void delete__dileadingjets_(void *p) {
      delete ((::_dileadingjets_*)p);
   }
   static void deleteArray__dileadingjets_(void *p) {
      delete [] ((::_dileadingjets_*)p);
   }
   static void destruct__dileadingjets_(void *p) {
      typedef ::_dileadingjets_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_dileadingjets_

//______________________________________________________________________________
void _run_info_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _run_info_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_run_info_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_run_info_::Class(),this);
   }
}

//______________________________________________________________________________
void _run_info_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _run_info_.
      TClass *R__cl = ::_run_info_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "autoXSec", &autoXSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "extXsec", &extXsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filterEff", &filterEff);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__run_info_(void *p) {
      return  p ? new(p) ::_run_info_ : new ::_run_info_;
   }
   static void *newArray__run_info_(Long_t nElements, void *p) {
      return p ? new(p) ::_run_info_[nElements] : new ::_run_info_[nElements];
   }
   // Wrapper around operator delete
   static void delete__run_info_(void *p) {
      delete ((::_run_info_*)p);
   }
   static void deleteArray__run_info_(void *p) {
      delete [] ((::_run_info_*)p);
   }
   static void destruct__run_info_(void *p) {
      typedef ::_run_info_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_run_info_

//______________________________________________________________________________
void _vertex_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _vertex_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_vertex_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_vertex_::Class(),this);
   }
}

//______________________________________________________________________________
void _vertex_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _vertex_.
      TClass *R__cl = ::_vertex_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isValid", &isValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFake", &isFake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xError", &xError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yError", &yError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zError", &zError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracksSize", &tracksSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2", &normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validTracksSize", &validTracksSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validTracksSize200MeV", &validTracksSize200MeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validTracksSize500MeV", &validTracksSize500MeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validTracksSize1GeV", &validTracksSize1GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPtMin", &sumPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPtMin200MeV", &sumPtMin200MeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPtMin500MeV", &sumPtMin500MeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPtMin1GeV", &sumPtMin1GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPt2Min", &sumPt2Min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPt2Min200MeV", &sumPt2Min200MeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPt2Min500MeV", &sumPt2Min500MeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumPt2Min1GeV", &sumPt2Min1GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrust", &thrust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sphericity", &sphericity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planarity", &planarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aplanarity", &aplanarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonIndex", &muonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrust_x", &thrust_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrust_y", &thrust_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrust_z", &thrust_z);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__vertex_(void *p) {
      return  p ? new(p) ::_vertex_ : new ::_vertex_;
   }
   static void *newArray__vertex_(Long_t nElements, void *p) {
      return p ? new(p) ::_vertex_[nElements] : new ::_vertex_[nElements];
   }
   // Wrapper around operator delete
   static void delete__vertex_(void *p) {
      delete ((::_vertex_*)p);
   }
   static void deleteArray__vertex_(void *p) {
      delete [] ((::_vertex_*)p);
   }
   static void destruct__vertex_(void *p) {
      typedef ::_vertex_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_vertex_

//______________________________________________________________________________
void _l1_obj_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _l1_obj_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_l1_obj_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_l1_obj_::Class(),this);
   }
}

//______________________________________________________________________________
void _l1_obj_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _l1_obj_.
      TClass *R__cl = ::_l1_obj_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerInfo", &triggerInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__l1_obj_(void *p) {
      return  p ? new(p) ::_l1_obj_ : new ::_l1_obj_;
   }
   static void *newArray__l1_obj_(Long_t nElements, void *p) {
      return p ? new(p) ::_l1_obj_[nElements] : new ::_l1_obj_[nElements];
   }
   // Wrapper around operator delete
   static void delete__l1_obj_(void *p) {
      delete ((::_l1_obj_*)p);
   }
   static void deleteArray__l1_obj_(void *p) {
      delete [] ((::_l1_obj_*)p);
   }
   static void destruct__l1_obj_(void *p) {
      typedef ::_l1_obj_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_l1_obj_

//______________________________________________________________________________
void _supercluster_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _supercluster_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_supercluster_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_supercluster_::Class(),this);
   }
}

//______________________________________________________________________________
void _supercluster_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _supercluster_.
      TClass *R__cl = ::_supercluster_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPixelSeed", &hasPixelSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasConversionTracks", &hasConversionTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiducialFlags", &fiducialFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEtaEta", &sigmaEtaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaIetaIeta", &sigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1x5", &e1x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2x5", &e2x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e3x3", &e3x3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e5x5", &e5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEnergyXtal", &maxEnergyXtal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicDepth1OverEm", &hadronicDepth1OverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicDepth2OverEm", &hadronicDepth2OverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicOverEm", &hadronicOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r1x5", &r1x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r2x5", &r2x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r9", &r9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scRawEnergy", &scRawEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPreshowerEnergy", &scPreshowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhiWidth", &scPhiWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEtaWidth", &scEtaWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scClustersSize", &scClustersSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster2ndMoments_sMaj", &cluster2ndMoments_sMaj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster2ndMoments_sMin", &cluster2ndMoments_sMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster2ndMoments_alpha", &cluster2ndMoments_alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidX", &centroidX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidY", &centroidY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidZ", &centroidZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__supercluster_(void *p) {
      return  p ? new(p) ::_supercluster_ : new ::_supercluster_;
   }
   static void *newArray__supercluster_(Long_t nElements, void *p) {
      return p ? new(p) ::_supercluster_[nElements] : new ::_supercluster_[nElements];
   }
   // Wrapper around operator delete
   static void delete__supercluster_(void *p) {
      delete ((::_supercluster_*)p);
   }
   static void deleteArray__supercluster_(void *p) {
      delete [] ((::_supercluster_*)p);
   }
   static void destruct__supercluster_(void *p) {
      typedef ::_supercluster_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_supercluster_

//______________________________________________________________________________
void _photon_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _photon_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_photon_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_photon_::Class(),this);
   }
}

//______________________________________________________________________________
void _photon_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _photon_.
      TClass *R__cl = ::_photon_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPixelSeed", &hasPixelSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasConversionTracks", &hasConversionTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiducialFlags", &fiducialFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEtaEta", &sigmaEtaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaIetaIeta", &sigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1x5", &e1x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2x5", &e2x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e3x3", &e3x3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e5x5", &e5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEnergyXtal", &maxEnergyXtal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicDepth1OverEm", &hadronicDepth1OverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicDepth2OverEm", &hadronicDepth2OverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicOverEm", &hadronicOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r1x5", &r1x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r2x5", &r2x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r9", &r9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalRecHitSumEtConeDR04", &ecalRecHitSumEtConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalTowerSumEtConeDR04", &hcalTowerSumEtConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalDepth1TowerSumEtConeDR04", &hcalDepth1TowerSumEtConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalDepth2TowerSumEtConeDR04", &hcalDepth2TowerSumEtConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkSumPtSolidConeDR04", &trkSumPtSolidConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkSumPtHollowConeDR04", &trkSumPtHollowConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrkSolidConeDR04", &nTrkSolidConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrkHollowConeDR04", &nTrkHollowConeDR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalRecHitSumEtConeDR03", &ecalRecHitSumEtConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalTowerSumEtConeDR03", &hcalTowerSumEtConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalDepth1TowerSumEtConeDR03", &hcalDepth1TowerSumEtConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalDepth2TowerSumEtConeDR03", &hcalDepth2TowerSumEtConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkSumPtSolidConeDR03", &trkSumPtSolidConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkSumPtHollowConeDR03", &trkSumPtHollowConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrkSolidConeDR03", &nTrkSolidConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrkHollowConeDR03", &nTrkHollowConeDR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scRawEnergy", &scRawEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPreshowerEnergy", &scPreshowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhiWidth", &scPhiWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEtaWidth", &scEtaWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scClustersSize", &scClustersSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster2ndMoments_sMaj", &cluster2ndMoments_sMaj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster2ndMoments_sMin", &cluster2ndMoments_sMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster2ndMoments_alpha", &cluster2ndMoments_alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidX", &centroidX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidY", &centroidY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidZ", &centroidZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__photon_(void *p) {
      return  p ? new(p) ::_photon_ : new ::_photon_;
   }
   static void *newArray__photon_(Long_t nElements, void *p) {
      return p ? new(p) ::_photon_[nElements] : new ::_photon_[nElements];
   }
   // Wrapper around operator delete
   static void delete__photon_(void *p) {
      delete ((::_photon_*)p);
   }
   static void deleteArray__photon_(void *p) {
      delete [] ((::_photon_*)p);
   }
   static void destruct__photon_(void *p) {
      typedef ::_photon_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_photon_

//______________________________________________________________________________
void _electron_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _electron_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_electron_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_electron_::Class(),this);
   }
}

//______________________________________________________________________________
void _electron_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _electron_.
      TClass *R__cl = ::_electron_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "classification", &classification);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPixCharge", &scPixCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGsfCtfScPixChargeConsistent", &isGsfCtfScPixChargeConsistent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGsfScPixChargeConsistent", &isGsfScPixChargeConsistent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGsfCtfChargeConsistent", &isGsfCtfChargeConsistent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalDrivenSeed", &ecalDrivenSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackerDrivenSeed", &trackerDrivenSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validKF", &validKF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_fbrem", &fMVAVar_fbrem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_kfchi2", &fMVAVar_kfchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_gsfchi2", &fMVAVar_gsfchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_kfhits", &fMVAVar_kfhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_kfhitsall", &fMVAVar_kfhitsall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_deta", &fMVAVar_deta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_dphi", &fMVAVar_dphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_detacalo", &fMVAVar_detacalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_dphicalo", &fMVAVar_dphicalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_see", &fMVAVar_see);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_spp", &fMVAVar_spp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_sigmaIEtaIPhi", &fMVAVar_sigmaIEtaIPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_etawidth", &fMVAVar_etawidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_phiwidth", &fMVAVar_phiwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_e1x5e5x5", &fMVAVar_e1x5e5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_R9", &fMVAVar_R9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_nbrems", &fMVAVar_nbrems);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_HoE", &fMVAVar_HoE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_EoP", &fMVAVar_EoP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_IoEmIoP", &fMVAVar_IoEmIoP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_eleEoPout", &fMVAVar_eleEoPout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_PreShowerOverRaw", &fMVAVar_PreShowerOverRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_EoPout", &fMVAVar_EoPout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_eta", &fMVAVar_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_pt", &fMVAVar_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_d0", &fMVAVar_d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_ip3d", &fMVAVar_ip3d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVAVar_ip3dSig", &fMVAVar_ip3dSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "swissCross", &swissCross);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist", &dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dcot", &dcot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radiusOfConversion", &radiusOfConversion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxFitConversion", &vtxFitConversion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mHits", &mHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfLostHits", &numberOfLostHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isElFromConversion", &isElFromConversion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfExpectedInnerHits", &numberOfExpectedInnerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaMissingHits", &deltaMissingHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEt", &scEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEta", &scEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhi", &scPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidX", &centroidX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidY", &centroidY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroidZ", &centroidZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scRawEnergy", &scRawEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPreshowerEnergy", &scPreshowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhiWidth", &scPhiWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEtaWidth", &scEtaWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scClustersSize", &scClustersSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeMode", &chargeMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qoverpMode", &qoverpMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambdaMode", &lambdaMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptMode", &ptMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiMode", &phiMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaMode", &etaMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qoverpModeError", &qoverpModeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambdaModeError", &lambdaModeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptModeError", &ptModeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiModeError", &phiModeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaModeError", &etaModeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSuperClusterOverP", &eSuperClusterOverP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSeedClusterOverP", &eSeedClusterOverP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSeedClusterOverPout", &eSeedClusterOverPout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eEleClusterOverPout", &eEleClusterOverPout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEtaSuperClusterTrackAtVtx", &deltaEtaSuperClusterTrackAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEtaSeedClusterTrackAtCalo", &deltaEtaSeedClusterTrackAtCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEtaEleClusterTrackAtCalo", &deltaEtaEleClusterTrackAtCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiEleClusterTrackAtCalo", &deltaPhiEleClusterTrackAtCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiSuperClusterTrackAtVtx", &deltaPhiSuperClusterTrackAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiSeedClusterTrackAtCalo", &deltaPhiSeedClusterTrackAtCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiducialFlags", &fiducialFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr03TkSumPt", &dr03TkSumPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr03EcalRecHitSumEt", &dr03EcalRecHitSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr03HcalDepth1TowerSumEt", &dr03HcalDepth1TowerSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr03HcalDepth2TowerSumEt", &dr03HcalDepth2TowerSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr03HcalTowerSumEt", &dr03HcalTowerSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr04TkSumPt", &dr04TkSumPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr04EcalRecHitSumEt", &dr04EcalRecHitSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr04HcalDepth1TowerSumEt", &dr04HcalDepth1TowerSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr04HcalDepth2TowerSumEt", &dr04HcalDepth2TowerSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dr04HcalTowerSumEt", &dr04HcalTowerSumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfRelIsoR03", &pfRelIsoR03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "effArea", &effArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoCh", &pfIsoCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoNeutral", &pfIsoNeutral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoPhoton", &pfIsoPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsoSumPUPt", &pfIsoSumPUPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfRelIsoR03EA", &pfRelIsoR03EA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEtaEta", &sigmaEtaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaIetaIeta", &sigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "full5x5_sigmaIetaIeta", &full5x5_sigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1x5", &e1x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2x5Max", &e2x5Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e5x5", &e5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalDepth1OverEcal", &hcalDepth1OverEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalDepth2OverEcal", &hcalDepth2OverEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalOverEcal", &hcalOverEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronicOverEm", &hadronicOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalDriven", &ecalDriven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "passingCutBasedPreselection", &passingCutBasedPreselection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "passingMvaPreselection", &passingMvaPreselection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mva", &mva);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbrem", &fbrem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfBrems", &numberOfBrems);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMomentumCorrected", &isMomentumCorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalEnergy", &ecalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "correctedEcalEnergy", &correctedEcalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackMomentumAtVtx", &trackMomentumAtVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalEnergyError", &ecalEnergyError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackMomentumError", &trackMomentumError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronMomentumError", &electronMomentumError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ooemoop", &ooemoop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "idBitMap", &idBitMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaIdBitMap", &mvaIdBitMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "regressionEnergy", &regressionEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "regressionEnergyError", &regressionEnergyError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedSCEt", &calibratedSCEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedSCEta", &calibratedSCEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedSCPhi", &calibratedSCPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedEnergy", &calibratedEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedPt", &calibratedPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedEta", &calibratedEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibratedPhi", &calibratedPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaTrigV0", &mvaTrigV0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaNonTrigV0", &mvaNonTrigV0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaTrigV0Cat", &mvaTrigV0Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaNonTrigV0Cat", &mvaNonTrigV0Cat);
      _track_::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__electron_(void *p) {
      return  p ? new(p) ::_electron_ : new ::_electron_;
   }
   static void *newArray__electron_(Long_t nElements, void *p) {
      return p ? new(p) ::_electron_[nElements] : new ::_electron_[nElements];
   }
   // Wrapper around operator delete
   static void delete__electron_(void *p) {
      delete ((::_electron_*)p);
   }
   static void deleteArray__electron_(void *p) {
      delete [] ((::_electron_*)p);
   }
   static void destruct__electron_(void *p) {
      typedef ::_electron_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_electron_

//______________________________________________________________________________
void _beam_spot_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _beam_spot_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_beam_spot_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_beam_spot_::Class(),this);
   }
}

//______________________________________________________________________________
void _beam_spot_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _beam_spot_.
      TClass *R__cl = ::_beam_spot_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", &y0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0", &z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0Error", &x0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0Error", &y0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0Error", &z0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaZ", &sigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaZError", &sigmaZError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthXError", &BeamWidthXError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthYError", &BeamWidthYError);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__beam_spot_(void *p) {
      return  p ? new(p) ::_beam_spot_ : new ::_beam_spot_;
   }
   static void *newArray__beam_spot_(Long_t nElements, void *p) {
      return p ? new(p) ::_beam_spot_[nElements] : new ::_beam_spot_[nElements];
   }
   // Wrapper around operator delete
   static void delete__beam_spot_(void *p) {
      delete ((::_beam_spot_*)p);
   }
   static void deleteArray__beam_spot_(void *p) {
      delete [] ((::_beam_spot_*)p);
   }
   static void destruct__beam_spot_(void *p) {
      typedef ::_beam_spot_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_beam_spot_

//______________________________________________________________________________
void _track_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _track_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_track_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_track_::Class(),this);
   }
}

//______________________________________________________________________________
void _track_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _track_.
      TClass *R__cl = ::_track_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexIndex", &vertexIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "associatedVertex", &associatedVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "closestVertexDist", &closestVertexDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2", &normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptError", &ptError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaError", &etaError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiError", &phiError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qoverp", &qoverp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qoverpError", &qoverpError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambda", &lambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lambdaError", &lambdaError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy0", &dxy0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy0Error", &dxy0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz0", &dz0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz0Error", &dz0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dsz0", &dsz0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dsz0Error", &dsz0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dsz", &dsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyVtx", &dxyVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzVtx", &dzVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dszVtx", &dszVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recHitsSize", &recHitsSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidHits", &numberOfValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerOk", &outerOk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nStereoHits", &nStereoHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerRadius", &outerRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "innerRadius", &innerRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidPixelHits", &numberOfValidPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidStripHits", &numberOfValidStripHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidPixelBarrelHits", &numberOfValidPixelBarrelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidTrackerLayers", &numberOfValidTrackerLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackerLayersWithMeasurement", &trackerLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixelLayersWithMeasurement", &pixelLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixelBarrelLayersWithMeasurement", &pixelBarrelLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixelEndcapLayersWithMeasurement", &pixelEndcapLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasValidHitInFirstPixelBarrel", &hasValidHitInFirstPixelBarrel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackerExpectedHitsInner_numberOfHits", &trackerExpectedHitsInner_numberOfHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcType", &mcType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcPt", &mcPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcEta", &mcEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcPhi", &mcPhi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__track_(void *p) {
      return  p ? new(p) ::_track_ : new ::_track_;
   }
   static void *newArray__track_(Long_t nElements, void *p) {
      return p ? new(p) ::_track_[nElements] : new ::_track_[nElements];
   }
   // Wrapper around operator delete
   static void delete__track_(void *p) {
      delete ((::_track_*)p);
   }
   static void deleteArray__track_(void *p) {
      delete [] ((::_track_*)p);
   }
   static void destruct__track_(void *p) {
      typedef ::_track_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_track_

//______________________________________________________________________________
void _muon_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _muon_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_muon_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_muon_::Class(),this);
   }
}

//______________________________________________________________________________
void _muon_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _muon_.
      TClass *R__cl = ::_muon_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonType", &muonType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitCharge", &refitCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitPt", &refitPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitEta", &refitEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitPhi", &refitPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitPtError", &refitPtError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitEtaError", &refitEtaError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitPhiError", &refitPhiError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitDxy", &refitDxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refitDz", &refitDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isHighPtMuon", &isHighPtMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDxy0", &globalDxy0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDz0", &globalDz0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDsz0", &globalDsz0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDxy0Error", &globalDxy0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDz0Error", &globalDz0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDsz0Error", &globalDsz0Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDxy", &globalDxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDz", &globalDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDsz", &globalDsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDxyVtx", &globalDxyVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDzVtx", &globalDzVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalDszVtx", &globalDszVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalRecHitsSize", &globalRecHitsSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalNumberOfValidHits", &globalNumberOfValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalCharge", &globalCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalPt", &globalPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalEta", &globalEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalPhi", &globalPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalPtError", &globalPtError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalEtaError", &globalEtaError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalPhiError", &globalPhiError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalNormalizedChi2", &globalNormalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalNumberOfValidMuonHits", &globalNumberOfValidMuonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerPt", &outerPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerEta", &outerEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerPhi", &outerPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerPtError", &outerPtError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerEtaError", &outerEtaError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerPhiError", &outerPhiError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerRecHitsSize", &outerRecHitsSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerNumberOfValidHits", &outerNumberOfValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerCharge", &outerCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerInnerOk", &outerInnerOk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "improvedMuonBestTrackPt", &improvedMuonBestTrackPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "improvedMuonBestTrackPtError", &improvedMuonBestTrackPtError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "improvedMuonBestTrackEta", &improvedMuonBestTrackEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "improvedMuonBestTrackPhi", &improvedMuonBestTrackPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "improvedMuonBestTrackCharge", &improvedMuonBestTrackCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSoftMuon", &isSoftMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTightMuon", &isTightMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGlobalMuon", &isGlobalMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isPFMuon", &isPFMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackDxy", &bestMuonBestTrackDxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackDz", &bestMuonBestTrackDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackPt", &bestMuonBestTrackPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackPtError", &bestMuonBestTrackPtError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackEta", &bestMuonBestTrackEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackPhi", &bestMuonBestTrackPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestMuonBestTrackCharge", &bestMuonBestTrackCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsolationR04", &pfIsolationR04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsolationR04beta", &pfIsolationR04beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsolationWeighted", &pfIsolationWeighted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfIsolationPUPPI", &pfIsolationPUPPI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfChambers", &numberOfChambers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stationGapMaskPull", &stationGapMaskPull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfMatches", &numberOfMatches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stationMask", &stationMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfMatchedStations", &numberOfMatchedStations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timenDof", &timenDof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTimeValid", &isTimeValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIPInOut", &timeAtIPInOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIPInOutErr", &timeAtIPInOutErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIPOutIn", &timeAtIPOutIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIPOutInErr", &timeAtIPOutInErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCaloCompatibilityValid", &isCaloCompatibilityValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caloCompatibility", &caloCompatibility);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isIsolationValid", &isIsolationValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03hadEt", &isolationR03hadEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03emEt", &isolationR03emEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03sumPt", &isolationR03sumPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03nTracks", &isolationR03nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03nJets", &isolationR03nJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03hoEt", &isolationR03hoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05hadEt", &isolationR05hadEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05emEt", &isolationR05emEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05sumPt", &isolationR05sumPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05nTracks", &isolationR05nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05nJets", &isolationR05nJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05hoEt", &isolationR05hoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03emVetoEt", &isolationR03emVetoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03hadVetoEt", &isolationR03hadVetoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR03hoVetoEt", &isolationR03hoVetoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05emVetoEt", &isolationR05emVetoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05hadVetoEt", &isolationR05hadVetoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isolationR05hoVetoEt", &isolationR05hoVetoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEnergyValid", &isEnergyValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergy", &calEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyem", &calEnergyem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyhad", &calEnergyhad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyho", &calEnergyho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyecal_time", &calEnergyecal_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyhcal_time", &calEnergyhcal_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyecal_timeError", &calEnergyecal_timeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyhcal_timeError", &calEnergyhcal_timeError);
      _track_::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__muon_(void *p) {
      return  p ? new(p) ::_muon_ : new ::_muon_;
   }
   static void *newArray__muon_(Long_t nElements, void *p) {
      return p ? new(p) ::_muon_[nElements] : new ::_muon_[nElements];
   }
   // Wrapper around operator delete
   static void delete__muon_(void *p) {
      delete ((::_muon_*)p);
   }
   static void deleteArray__muon_(void *p) {
      delete [] ((::_muon_*)p);
   }
   static void destruct__muon_(void *p) {
      typedef ::_muon_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_muon_

//______________________________________________________________________________
void _jet_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _jet_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_jet_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_jet_::Class(),this);
   }
}

//______________________________________________________________________________
void _jet_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _jet_.
      TClass *R__cl = ::_jet_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "physicsEta", &physicsEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "physicsPt", &physicsPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "physicsPhi", &physicsPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nConstituent", &nConstituent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L2L3pt", &L2L3pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L2L3scale", &L2L3scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L4scale", &L4scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L5scale", &L5scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L6scale", &L6scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L7scale", &L7scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L8scale", &L8scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleUnc", &scaleUnc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pileup", &pileup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area", &area);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L", &L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHPD", &fHPD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRBX", &fRBX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n60", &n60);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n90", &n90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergyInEE", &emEnergyInEE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergyInHF", &emEnergyInHF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergyInEB", &emEnergyInEB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergyInHB", &hadEnergyInHB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergyInHO", &hadEnergyInHO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergyInHF", &hadEnergyInHF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergyInHE", &hadEnergyInHE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergyFraction", &emEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energyFractionHadronic", &energyFractionHadronic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEInEmTowers", &maxEInEmTowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEInHadTowers", &maxEInHadTowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonMultiplicity", &muonMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedMultiplicity", &chargedMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronMultiplicity", &electronMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedHadronEnergy", &chargedHadronEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedHadronEnergyFraction", &chargedHadronEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutralHadronEnergy", &neutralHadronEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutralHadronEnergyFraction", &neutralHadronEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedEmEnergy", &chargedEmEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedEmEnergyFraction", &chargedEmEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutralEmEnergy", &neutralEmEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutralEmEnergyFraction", &neutralEmEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zspCor", &zspCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEnergy", &photonEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEnergyFraction", &photonEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronEnergy", &electronEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronEnergyFraction", &electronEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonEnergy", &muonEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonEnergyFraction", &muonEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HFHadronEnergy", &HFHadronEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HFHadronEnergyFraction", &HFHadronEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HFEMEnergy", &HFEMEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HFEMEnergyFraction", &HFEMEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedHadronMultiplicity", &chargedHadronMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutralHadronMultiplicity", &neutralHadronMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonMultiplicity", &photonMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HFHadronMultiplicity", &HFHadronMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HFEMMultiplicity", &HFEMMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedMuEnergy", &chargedMuEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargedMuEnergyFraction", &chargedMuEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutralMultiplicity", &neutralMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quarkGluonLikelihood", &quarkGluonLikelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quarkGluonMLP", &quarkGluonMLP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDFlag", &puIDFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDMva", &puIDMva);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDLoose", &puIDLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDMedium", &puIDMedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIDTight", &puIDTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc_flavor", &mc_flavor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc_pt", &mc_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc_eta", &mc_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc_phi", &mc_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tag[6]", tag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flavor[6]", flavor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexIndex", &jetVertexIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexFrac", &jetVertexFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexnlIndex", &jetVertexnlIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexnlFrac", &jetVertexnlFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexIndexNum", &jetVertexIndexNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexFracNum", &jetVertexFracNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexnlIndexNum", &jetVertexnlIndexNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexnlFracNum", &jetVertexnlFracNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexIndexSum", &jetVertexIndexSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexFracSum", &jetVertexFracSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexnlIndexSum", &jetVertexnlIndexSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetVertexnlFracSum", &jetVertexnlFracSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum", &sum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumS", &sumS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumN", &sumN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totsum", &totsum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totsumS", &totsumS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totsumN", &totsumN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dissum5", &dissum5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dissum5S", &dissum5S);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dissum5N", &dissum5N);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dissum10", &dissum10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dissum10S", &dissum10S);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dissum10N", &dissum10N);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__jet_(void *p) {
      return  p ? new(p) ::_jet_ : new ::_jet_;
   }
   static void *newArray__jet_(Long_t nElements, void *p) {
      return p ? new(p) ::_jet_[nElements] : new ::_jet_[nElements];
   }
   // Wrapper around operator delete
   static void delete__jet_(void *p) {
      delete ((::_jet_*)p);
   }
   static void deleteArray__jet_(void *p) {
      delete [] ((::_jet_*)p);
   }
   static void destruct__jet_(void *p) {
      typedef ::_jet_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_jet_

//______________________________________________________________________________
void _di_jet_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _di_jet_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_di_jet_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_di_jet_::Class(),this);
   }
}

//______________________________________________________________________________
void _di_jet_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _di_jet_.
      TClass *R__cl = ::_di_jet_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetType", &jetType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtA", &daughtA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtB", &daughtB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isValid", &isValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalChiSquared", &totalChiSquared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiSquaredProbability", &chiSquaredProbability);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "degreesOfFreedom", &degreesOfFreedom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vxError", &vxError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vyError", &vyError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vzError", &vzError);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__di_jet_(void *p) {
      return  p ? new(p) ::_di_jet_ : new ::_di_jet_;
   }
   static void *newArray__di_jet_(Long_t nElements, void *p) {
      return p ? new(p) ::_di_jet_[nElements] : new ::_di_jet_[nElements];
   }
   // Wrapper around operator delete
   static void delete__di_jet_(void *p) {
      delete ((::_di_jet_*)p);
   }
   static void deleteArray__di_jet_(void *p) {
      delete [] ((::_di_jet_*)p);
   }
   static void destruct__di_jet_(void *p) {
      typedef ::_di_jet_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_di_jet_

//______________________________________________________________________________
void _gen_jet_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _gen_jet_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_gen_jet_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_gen_jet_::Class(),this);
   }
}

//______________________________________________________________________________
void _gen_jet_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _gen_jet_.
      TClass *R__cl = ::_gen_jet_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc_flavor", &mc_flavor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nConstituent", &nConstituent);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__gen_jet_(void *p) {
      return  p ? new(p) ::_gen_jet_ : new ::_gen_jet_;
   }
   static void *newArray__gen_jet_(Long_t nElements, void *p) {
      return p ? new(p) ::_gen_jet_[nElements] : new ::_gen_jet_[nElements];
   }
   // Wrapper around operator delete
   static void delete__gen_jet_(void *p) {
      delete ((::_gen_jet_*)p);
   }
   static void deleteArray__gen_jet_(void *p) {
      delete [] ((::_gen_jet_*)p);
   }
   static void destruct__gen_jet_(void *p) {
      typedef ::_gen_jet_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_gen_jet_

//______________________________________________________________________________
void _W_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _W_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_W_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_W_::Class(),this);
   }
}

//______________________________________________________________________________
void _W_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _W_.
      TClass *R__cl = ::_W_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndex", &leptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonType", &leptonType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recoWy1", &recoWy1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recoWy2", &recoWy2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta", &delta);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__W_(void *p) {
      return  p ? new(p) ::_W_ : new ::_W_;
   }
   static void *newArray__W_(Long_t nElements, void *p) {
      return p ? new(p) ::_W_[nElements] : new ::_W_[nElements];
   }
   // Wrapper around operator delete
   static void delete__W_(void *p) {
      delete ((::_W_*)p);
   }
   static void deleteArray__W_(void *p) {
      delete [] ((::_W_*)p);
   }
   static void destruct__W_(void *p) {
      typedef ::_W_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_W_

//______________________________________________________________________________
void _di_lepton_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _di_lepton_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_di_lepton_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_di_lepton_::Class(),this);
   }
}

//______________________________________________________________________________
void _di_lepton_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _di_lepton_.
      TClass *R__cl = ::_di_lepton_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfx1", &xfx1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfx2", &xfx2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mistag", &mistag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qqbar", &qqbar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qbarq", &qbarq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtA", &daughtA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtB", &daughtB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtAType", &daughtAType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daughtBType", &daughtBType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isValid", &isValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalChiSquared", &totalChiSquared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiSquaredProbability", &chiSquaredProbability);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "degreesOfFreedom", &degreesOfFreedom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fittedMass", &fittedMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vxError", &vxError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vyError", &vyError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vzError", &vzError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1", &e1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2", &e2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosPhiFit", &cosPhiFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosPhi", &cosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosTheta", &cosTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosThetaCS", &cosThetaCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sin2Theta", &sin2Theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanPhi", &tanPhi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__di_lepton_(void *p) {
      return  p ? new(p) ::_di_lepton_ : new ::_di_lepton_;
   }
   static void *newArray__di_lepton_(Long_t nElements, void *p) {
      return p ? new(p) ::_di_lepton_[nElements] : new ::_di_lepton_[nElements];
   }
   // Wrapper around operator delete
   static void delete__di_lepton_(void *p) {
      delete ((::_di_lepton_*)p);
   }
   static void deleteArray__di_lepton_(void *p) {
      delete [] ((::_di_lepton_*)p);
   }
   static void destruct__di_lepton_(void *p) {
      typedef ::_di_lepton_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_di_lepton_

//______________________________________________________________________________
void _tri_lepton_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _tri_lepton_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_tri_lepton_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_tri_lepton_::Class(),this);
   }
}

//______________________________________________________________________________
void _tri_lepton_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _tri_lepton_.
      TClass *R__cl = ::_tri_lepton_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonIndex", &dileptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndex", &leptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonType", &leptonType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m12", &m12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta12", &eta12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt12", &pt12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi12", &phi12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mt3", &mt3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity12", &rapidity12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m23", &m23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta23", &eta23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt23", &pt23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi23", &phi23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mt1", &mt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity23", &rapidity23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta12", &theta12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta23", &theta23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mt", &mt);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__tri_lepton_(void *p) {
      return  p ? new(p) ::_tri_lepton_ : new ::_tri_lepton_;
   }
   static void *newArray__tri_lepton_(Long_t nElements, void *p) {
      return p ? new(p) ::_tri_lepton_[nElements] : new ::_tri_lepton_[nElements];
   }
   // Wrapper around operator delete
   static void delete__tri_lepton_(void *p) {
      delete ((::_tri_lepton_*)p);
   }
   static void deleteArray__tri_lepton_(void *p) {
      delete [] ((::_tri_lepton_*)p);
   }
   static void destruct__tri_lepton_(void *p) {
      typedef ::_tri_lepton_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_tri_lepton_

//______________________________________________________________________________
void _quar_lepton_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _quar_lepton_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_quar_lepton_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_quar_lepton_::Class(),this);
   }
}

//______________________________________________________________________________
void _quar_lepton_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _quar_lepton_.
      TClass *R__cl = ::_quar_lepton_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonIndex", &dileptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonType", &leptonType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndex1", &leptonIndex1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndex2", &leptonIndex2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m12", &m12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt12", &pt12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta12", &eta12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity12", &rapidity12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi12", &phi12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m34", &m34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt34", &pt34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta34", &eta34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity34", &rapidity34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi34", &phi34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaStar", &thetaStar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__quar_lepton_(void *p) {
      return  p ? new(p) ::_quar_lepton_ : new ::_quar_lepton_;
   }
   static void *newArray__quar_lepton_(Long_t nElements, void *p) {
      return p ? new(p) ::_quar_lepton_[nElements] : new ::_quar_lepton_[nElements];
   }
   // Wrapper around operator delete
   static void delete__quar_lepton_(void *p) {
      delete ((::_quar_lepton_*)p);
   }
   static void deleteArray__quar_lepton_(void *p) {
      delete [] ((::_quar_lepton_*)p);
   }
   static void destruct__quar_lepton_(void *p) {
      typedef ::_quar_lepton_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_quar_lepton_

//______________________________________________________________________________
void _lepton_photon_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _lepton_photon_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_lepton_photon_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_lepton_photon_::Class(),this);
   }
}

//______________________________________________________________________________
void _lepton_photon_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _lepton_photon_.
      TClass *R__cl = ::_lepton_photon_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndex", &leptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonIndex", &photonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonType", &leptonType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosPhi", &cosPhi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__lepton_photon_(void *p) {
      return  p ? new(p) ::_lepton_photon_ : new ::_lepton_photon_;
   }
   static void *newArray__lepton_photon_(Long_t nElements, void *p) {
      return p ? new(p) ::_lepton_photon_[nElements] : new ::_lepton_photon_[nElements];
   }
   // Wrapper around operator delete
   static void delete__lepton_photon_(void *p) {
      delete ((::_lepton_photon_*)p);
   }
   static void deleteArray__lepton_photon_(void *p) {
      delete [] ((::_lepton_photon_*)p);
   }
   static void destruct__lepton_photon_(void *p) {
      typedef ::_lepton_photon_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_lepton_photon_

//______________________________________________________________________________
void _dilepton_photon_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _dilepton_photon_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_dilepton_photon_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_dilepton_photon_::Class(),this);
   }
}

//______________________________________________________________________________
void _dilepton_photon_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _dilepton_photon_.
      TClass *R__cl = ::_dilepton_photon_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonIndex", &dileptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonIndex", &photonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rapidity", &rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mll", &mll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m1g", &m1g);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2g", &m2g);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosPhi", &cosPhi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__dilepton_photon_(void *p) {
      return  p ? new(p) ::_dilepton_photon_ : new ::_dilepton_photon_;
   }
   static void *newArray__dilepton_photon_(Long_t nElements, void *p) {
      return p ? new(p) ::_dilepton_photon_[nElements] : new ::_dilepton_photon_[nElements];
   }
   // Wrapper around operator delete
   static void delete__dilepton_photon_(void *p) {
      delete ((::_dilepton_photon_*)p);
   }
   static void deleteArray__dilepton_photon_(void *p) {
      delete [] ((::_dilepton_photon_*)p);
   }
   static void destruct__dilepton_photon_(void *p) {
      typedef ::_dilepton_photon_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_dilepton_photon_

//______________________________________________________________________________
void _event_::Streamer(TBuffer &R__b)
{
   // Stream an object of class _event_.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(_event_::Class(),this);
   } else {
      R__b.WriteClassBuffer(_event_::Class(),this);
   }
}

//______________________________________________________________________________
void _event_::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class _event_.
      TClass *R__cl = ::_event_::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNum", &eventNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNum", &runNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumiBlock", &lumiBlock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bunchCrossing", &bunchCrossing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "orbitNum", &orbitNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeLow", &timeLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeHigh", &timeHigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventWeight", &eventWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BField", &BField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rho", &rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoIso", &rhoIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoCh", &rhoCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoCh2p4", &rhoCh2p4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma", &sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaIso", &sigmaIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaCh", &sigmaCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaCh2p4", &sigmaCh2p4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoCHS", &rhoCHS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoCalo", &rhoCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoTrack", &rhoTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaCHS", &sigmaCHS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaCalo", &sigmaCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaTrack", &sigmaTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simTrackNum", &simTrackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexNum", &vertexNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxPosX", &vtxPosX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxPosY", &vtxPosY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxPosZ", &vtxPosZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxPosXError", &vtxPosXError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxPosYError", &vtxPosYError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxPosZError", &vtxPosZError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcVertexNumTruth", &mcVertexNumTruth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcVertexNum", &mcVertexNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcVertexNump1", &mcVertexNump1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcVertexNumm1", &mcVertexNumm1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonNum", &photonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "superclusterNum", &superclusterNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronNum", &electronNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNum", &trackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jetNum", &jetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genJetNum", &genJetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "akGenJetNum", &akGenJetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caloJetNum", &caloJetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jptJetNum", &jptJetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfJetNum", &pfJetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonNum", &muonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WNum", &WNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quarleptonNum", &quarleptonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trileptonNum", &trileptonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonNum", &dileptonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dijetNum", &dijetNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonTrkPairNum", &leptonTrkPairNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonPhotonNum", &leptonPhotonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileptonPhotonNum", &dileptonPhotonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l1ObjNum", &l1ObjNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltObjNum", &hltObjNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trgBits", &trgBits);
      R__insp.InspectMember(trgBits, "trgBits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltNonIsoElectronNum", &hltNonIsoElectronNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltNonIsoElectrons", &hltNonIsoElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltElectronNum", &hltElectronNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltElectrons", &hltElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltElectronLNum", &hltElectronLNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltElectronLs", &hltElectronLs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltElectronLleg1Num", &hltElectronLleg1Num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltElectronLleg1s", &hltElectronLleg1s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltElectronLleg2Num", &hltElectronLleg2Num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltElectronLleg2s", &hltElectronLleg2s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMuonElectronNum", &hltMuonElectronNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltMuonElectrons", &hltMuonElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltElectronMuonNum", &hltElectronMuonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltElectronMuons", &hltElectronMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltNonIsoMuonNum", &hltNonIsoMuonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltNonIsoMuons", &hltNonIsoMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMuonNum", &hltMuonNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltMuons", &hltMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMuonLNum", &hltMuonLNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltMuonLs", &hltMuonLs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMuonLleg1Num", &hltMuonLleg1Num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltMuonLleg1s", &hltMuonLleg1s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMuonLleg2Num", &hltMuonLleg2Num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hltMuonLleg2s", &hltMuonLleg2s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*vertices", &vertices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*superclusters", &superclusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*photons", &photons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*electrons", &electrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*l1Objs", &l1Objs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tracks", &tracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*jets", &jets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*genJets", &genJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*akGenJets", &akGenJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*caloJets", &caloJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*jptJets", &jptJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pfJets", &pfJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*simTracks", &simTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*muons", &muons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ws", &Ws);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dileptons", &dileptons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dijets", &dijets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trileptons", &trileptons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*quarleptons", &quarleptons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*leptonphotons", &leptonphotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dileptonphotons", &dileptonphotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*leptonTrkPairs", &leptonTrkPairs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamSpot", &beamSpot);
      R__insp.InspectMember(beamSpot, "beamSpot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mc", &mc);
      R__insp.InspectMember(mc, "mc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventFilterBit", &eventFilterBit);
      R__insp.InspectMember(eventFilterBit, "eventFilterBit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genEventInfo", &genEventInfo);
      R__insp.InspectMember(genEventInfo, "genEventInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genTTbar", &genTTbar);
      R__insp.InspectMember(genTTbar, "genTTbar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genDrellYan", &genDrellYan);
      R__insp.InspectMember(genDrellYan, "genDrellYan.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genwz", &genwz);
      R__insp.InspectMember(genwz, "genwz.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runInfo", &runInfo);
      R__insp.InspectMember(runInfo, "runInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltInfo", &hltInfo);
      R__insp.InspectMember(hltInfo, "hltInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mets", &mets);
      R__insp.InspectMember(mets, "mets.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dileadingjets", &dileadingjets);
      R__insp.InspectMember(dileadingjets, "dileadingjets.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new__event_(void *p) {
      return  p ? new(p) ::_event_ : new ::_event_;
   }
   static void *newArray__event_(Long_t nElements, void *p) {
      return p ? new(p) ::_event_[nElements] : new ::_event_[nElements];
   }
   // Wrapper around operator delete
   static void delete__event_(void *p) {
      delete ((::_event_*)p);
   }
   static void deleteArray__event_(void *p) {
      delete [] ((::_event_*)p);
   }
   static void destruct__event_(void *p) {
      typedef ::_event_ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::_event_

/********************************************************
* kinematicsDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablekinematicsDict();

extern "C" void G__set_cpp_environmentkinematicsDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("kinematics.h");
  G__cpp_reset_tagtablekinematicsDict();
}
#include <new>
extern "C" int G__cpp_dllrevkinematicsDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* _event_filterBit_ */
static int G__kinematicsDict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _event_filterBit_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _event_filterBit_[n];
     } else {
       p = new((void*) gvp) _event_filterBit_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _event_filterBit_;
     } else {
       p = new((void*) gvp) _event_filterBit_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _event_filterBit_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _event_filterBit_(*(_event_filterBit_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _event_filterBit_(*(_event_filterBit_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_filterBit_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _event_filterBit_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _event_filterBit_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _event_filterBit_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _event_filterBit_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_filterBit_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _event_filterBit_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _event_filterBit_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _event_filterBit_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _event_filterBit_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _event_filterBit_ G__T_event_filterBit_;
static int G__kinematicsDict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_event_filterBit_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_event_filterBit_*) (soff+(sizeof(_event_filterBit_)*i)))->~G__T_event_filterBit_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_event_filterBit_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_event_filterBit_*) (soff))->~G__T_event_filterBit_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _event_filterBit_* dest = (_event_filterBit_*) G__getstructoffset();
   *dest = *(_event_filterBit_*) libp->para[0].ref;
   const _event_filterBit_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _gen_eventInfo_ */
static int G__kinematicsDict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_eventInfo_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_eventInfo_[n];
     } else {
       p = new((void*) gvp) _gen_eventInfo_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_eventInfo_;
     } else {
       p = new((void*) gvp) _gen_eventInfo_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_eventInfo_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _gen_eventInfo_(*(_gen_eventInfo_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _gen_eventInfo_(*(_gen_eventInfo_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_eventInfo_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _gen_eventInfo_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_eventInfo_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _gen_eventInfo_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _gen_eventInfo_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_eventInfo_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_eventInfo_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_eventInfo_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_eventInfo_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_eventInfo_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _gen_eventInfo_ G__T_gen_eventInfo_;
static int G__kinematicsDict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_gen_eventInfo_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_gen_eventInfo_*) (soff+(sizeof(_gen_eventInfo_)*i)))->~G__T_gen_eventInfo_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_gen_eventInfo_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_gen_eventInfo_*) (soff))->~G__T_gen_eventInfo_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_eventInfo_* dest = (_gen_eventInfo_*) G__getstructoffset();
   *dest = *(_gen_eventInfo_*) libp->para[0].ref;
   const _gen_eventInfo_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _mc_process_ */
static int G__kinematicsDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _mc_process_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _mc_process_[n];
     } else {
       p = new((void*) gvp) _mc_process_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _mc_process_;
     } else {
       p = new((void*) gvp) _mc_process_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _mc_process_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _mc_process_(*(_mc_process_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _mc_process_(*(_mc_process_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_mc_process_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _mc_process_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _mc_process_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _mc_process_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _mc_process_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_mc_process_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _mc_process_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _mc_process_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _mc_process_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _mc_process_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _mc_process_ G__T_mc_process_;
static int G__kinematicsDict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_mc_process_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_mc_process_*) (soff+(sizeof(_mc_process_)*i)))->~G__T_mc_process_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_mc_process_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_mc_process_*) (soff))->~G__T_mc_process_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _mc_process_* dest = (_mc_process_*) G__getstructoffset();
   *dest = *(_mc_process_*) libp->para[0].ref;
   const _mc_process_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _gen_ttbar_ */
static int G__kinematicsDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_ttbar_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_ttbar_[n];
     } else {
       p = new((void*) gvp) _gen_ttbar_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_ttbar_;
     } else {
       p = new((void*) gvp) _gen_ttbar_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_ttbar_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _gen_ttbar_(*(_gen_ttbar_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _gen_ttbar_(*(_gen_ttbar_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_ttbar_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _gen_ttbar_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_ttbar_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _gen_ttbar_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _gen_ttbar_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_ttbar_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_ttbar_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_ttbar_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_ttbar_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_ttbar_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _gen_ttbar_ G__T_gen_ttbar_;
static int G__kinematicsDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_gen_ttbar_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_gen_ttbar_*) (soff+(sizeof(_gen_ttbar_)*i)))->~G__T_gen_ttbar_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_gen_ttbar_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_gen_ttbar_*) (soff))->~G__T_gen_ttbar_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_ttbar_* dest = (_gen_ttbar_*) G__getstructoffset();
   *dest = *(_gen_ttbar_*) libp->para[0].ref;
   const _gen_ttbar_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _gen_DrellYan_ */
static int G__kinematicsDict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_DrellYan_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_DrellYan_[n];
     } else {
       p = new((void*) gvp) _gen_DrellYan_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_DrellYan_;
     } else {
       p = new((void*) gvp) _gen_DrellYan_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_DrellYan_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _gen_DrellYan_(*(_gen_DrellYan_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _gen_DrellYan_(*(_gen_DrellYan_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_DrellYan_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _gen_DrellYan_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_DrellYan_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _gen_DrellYan_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _gen_DrellYan_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_DrellYan_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_DrellYan_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_DrellYan_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_DrellYan_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_DrellYan_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _gen_DrellYan_ G__T_gen_DrellYan_;
static int G__kinematicsDict_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_gen_DrellYan_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_gen_DrellYan_*) (soff+(sizeof(_gen_DrellYan_)*i)))->~G__T_gen_DrellYan_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_gen_DrellYan_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_gen_DrellYan_*) (soff))->~G__T_gen_DrellYan_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_DrellYan_* dest = (_gen_DrellYan_*) G__getstructoffset();
   *dest = *(_gen_DrellYan_*) libp->para[0].ref;
   const _gen_DrellYan_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _genwz_ */
static int G__kinematicsDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _genwz_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _genwz_[n];
     } else {
       p = new((void*) gvp) _genwz_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _genwz_;
     } else {
       p = new((void*) gvp) _genwz_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__genwz_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _genwz_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _genwz_(*(_genwz_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _genwz_(*(_genwz_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__genwz_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_genwz_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _genwz_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _genwz_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _genwz_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _genwz_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_genwz_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _genwz_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _genwz_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _genwz_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _genwz_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _genwz_ G__T_genwz_;
static int G__kinematicsDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_genwz_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_genwz_*) (soff+(sizeof(_genwz_)*i)))->~G__T_genwz_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_genwz_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_genwz_*) (soff))->~G__T_genwz_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _genwz_* dest = (_genwz_*) G__getstructoffset();
   *dest = *(_genwz_*) libp->para[0].ref;
   const _genwz_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _vec4_ */
static int G__kinematicsDict_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _vec4_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _vec4_[n];
     } else {
       p = new((void*) gvp) _vec4_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _vec4_;
     } else {
       p = new((void*) gvp) _vec4_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__vec4_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _vec4_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _vec4_(*(_vec4_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _vec4_(*(_vec4_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__vec4_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _vec4_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _vec4_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _vec4_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _vec4_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_vec4_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _vec4_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _vec4_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _vec4_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_233_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _vec4_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _vec4_ G__T_vec4_;
static int G__kinematicsDict_233_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_vec4_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_vec4_*) (soff+(sizeof(_vec4_)*i)))->~G__T_vec4_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_vec4_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_vec4_*) (soff))->~G__T_vec4_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_233_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _vec4_* dest = (_vec4_*) G__getstructoffset();
   *dest = *(_vec4_*) libp->para[0].ref;
   const _vec4_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _met_ */
static int G__kinematicsDict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _met_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _met_[n];
     } else {
       p = new((void*) gvp) _met_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _met_;
     } else {
       p = new((void*) gvp) _met_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__met_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _met_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _met_(*(_met_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _met_(*(_met_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__met_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_met_*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _met_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _met_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _met_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _met_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_met_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _met_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _met_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _met_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _met_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _met_ G__T_met_;
static int G__kinematicsDict_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_met_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_met_*) (soff+(sizeof(_met_)*i)))->~G__T_met_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_met_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_met_*) (soff))->~G__T_met_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _met_* dest = (_met_*) G__getstructoffset();
   *dest = *(_met_*) libp->para[0].ref;
   const _met_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _track_ */
static int G__kinematicsDict_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _track_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _track_[n];
     } else {
       p = new((void*) gvp) _track_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _track_;
     } else {
       p = new((void*) gvp) _track_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__track_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _track_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _track_(*(_track_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _track_(*(_track_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__track_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _track_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _track_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _track_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _track_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_track_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _track_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _track_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _track_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _track_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _track_ G__T_track_;
static int G__kinematicsDict_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_track_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_track_*) (soff+(sizeof(_track_)*i)))->~G__T_track_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_track_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_track_*) (soff))->~G__T_track_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _track_* dest = (_track_*) G__getstructoffset();
   *dest = *(_track_*) libp->para[0].ref;
   const _track_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _trg_bits_ */
static int G__kinematicsDict_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _trg_bits_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _trg_bits_[n];
     } else {
       p = new((void*) gvp) _trg_bits_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _trg_bits_;
     } else {
       p = new((void*) gvp) _trg_bits_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _trg_bits_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _trg_bits_(*(_trg_bits_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _trg_bits_(*(_trg_bits_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_trg_bits_*) G__getstructoffset())->setL1TrgBits((ULong_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_trg_bits_*) G__getstructoffset())->setL1TTrgBits((ULong_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_trg_bits_*) G__getstructoffset())->setHLTAccTrgBits((ULong_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_trg_bits_*) G__getstructoffset())->setHLTRunTrgBits((ULong_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_trg_bits_*) G__getstructoffset())->setHLTErrTrgBits((ULong_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _trg_bits_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _trg_bits_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _trg_bits_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _trg_bits_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_trg_bits_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _trg_bits_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _trg_bits_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _trg_bits_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_236_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _trg_bits_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _trg_bits_ G__T_trg_bits_;
static int G__kinematicsDict_236_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_trg_bits_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_trg_bits_*) (soff+(sizeof(_trg_bits_)*i)))->~G__T_trg_bits_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_trg_bits_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_trg_bits_*) (soff))->~G__T_trg_bits_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_236_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _trg_bits_* dest = (_trg_bits_*) G__getstructoffset();
   *dest = *(_trg_bits_*) libp->para[0].ref;
   const _trg_bits_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _hlt_info_ */
static int G__kinematicsDict_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _hlt_info_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _hlt_info_[n];
     } else {
       p = new((void*) gvp) _hlt_info_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _hlt_info_;
     } else {
       p = new((void*) gvp) _hlt_info_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _hlt_info_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _hlt_info_(*(_hlt_info_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _hlt_info_(*(_hlt_info_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _hlt_info_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _hlt_info_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _hlt_info_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _hlt_info_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_hlt_info_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _hlt_info_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _hlt_info_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _hlt_info_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_237_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _hlt_info_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _hlt_info_ G__T_hlt_info_;
static int G__kinematicsDict_237_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_hlt_info_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_hlt_info_*) (soff+(sizeof(_hlt_info_)*i)))->~G__T_hlt_info_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_hlt_info_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_hlt_info_*) (soff))->~G__T_hlt_info_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_237_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _hlt_info_* dest = (_hlt_info_*) G__getstructoffset();
   *dest = *(_hlt_info_*) libp->para[0].ref;
   const _hlt_info_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _mets_ */
static int G__kinematicsDict_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _mets_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _mets_[n];
     } else {
       p = new((void*) gvp) _mets_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _mets_;
     } else {
       p = new((void*) gvp) _mets_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__mets_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _mets_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _mets_(*(_mets_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _mets_(*(_mets_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__mets_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _mets_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _mets_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _mets_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _mets_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_mets_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _mets_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _mets_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _mets_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_238_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _mets_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _mets_ G__T_mets_;
static int G__kinematicsDict_238_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_mets_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_mets_*) (soff+(sizeof(_mets_)*i)))->~G__T_mets_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_mets_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_mets_*) (soff))->~G__T_mets_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_238_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _mets_* dest = (_mets_*) G__getstructoffset();
   *dest = *(_mets_*) libp->para[0].ref;
   const _mets_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _dileadingjets_ */
static int G__kinematicsDict_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _dileadingjets_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _dileadingjets_[n];
     } else {
       p = new((void*) gvp) _dileadingjets_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _dileadingjets_;
     } else {
       p = new((void*) gvp) _dileadingjets_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _dileadingjets_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _dileadingjets_(*(_dileadingjets_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _dileadingjets_(*(_dileadingjets_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_dileadingjets_*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _dileadingjets_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _dileadingjets_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _dileadingjets_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _dileadingjets_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_dileadingjets_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _dileadingjets_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _dileadingjets_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _dileadingjets_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _dileadingjets_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _dileadingjets_ G__T_dileadingjets_;
static int G__kinematicsDict_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_dileadingjets_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_dileadingjets_*) (soff+(sizeof(_dileadingjets_)*i)))->~G__T_dileadingjets_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_dileadingjets_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_dileadingjets_*) (soff))->~G__T_dileadingjets_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _dileadingjets_* dest = (_dileadingjets_*) G__getstructoffset();
   *dest = *(_dileadingjets_*) libp->para[0].ref;
   const _dileadingjets_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _run_info_ */
static int G__kinematicsDict_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _run_info_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _run_info_[n];
     } else {
       p = new((void*) gvp) _run_info_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _run_info_;
     } else {
       p = new((void*) gvp) _run_info_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__run_info_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _run_info_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _run_info_(*(_run_info_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _run_info_(*(_run_info_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__run_info_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _run_info_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _run_info_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _run_info_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _run_info_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_run_info_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _run_info_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _run_info_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _run_info_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _run_info_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _run_info_ G__T_run_info_;
static int G__kinematicsDict_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_run_info_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_run_info_*) (soff+(sizeof(_run_info_)*i)))->~G__T_run_info_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_run_info_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_run_info_*) (soff))->~G__T_run_info_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_240_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _run_info_* dest = (_run_info_*) G__getstructoffset();
   *dest = *(_run_info_*) libp->para[0].ref;
   const _run_info_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _vertex_ */
static int G__kinematicsDict_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _vertex_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _vertex_[n];
     } else {
       p = new((void*) gvp) _vertex_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _vertex_;
     } else {
       p = new((void*) gvp) _vertex_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__vertex_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _vertex_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _vertex_(*(_vertex_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _vertex_(*(_vertex_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__vertex_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _vertex_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _vertex_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _vertex_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _vertex_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_vertex_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _vertex_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _vertex_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _vertex_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _vertex_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _vertex_ G__T_vertex_;
static int G__kinematicsDict_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_vertex_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_vertex_*) (soff+(sizeof(_vertex_)*i)))->~G__T_vertex_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_vertex_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_vertex_*) (soff))->~G__T_vertex_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_241_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _vertex_* dest = (_vertex_*) G__getstructoffset();
   *dest = *(_vertex_*) libp->para[0].ref;
   const _vertex_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _l1_obj_ */
static int G__kinematicsDict_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _l1_obj_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _l1_obj_[n];
     } else {
       p = new((void*) gvp) _l1_obj_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _l1_obj_;
     } else {
       p = new((void*) gvp) _l1_obj_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _l1_obj_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _l1_obj_(*(_l1_obj_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _l1_obj_(*(_l1_obj_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _l1_obj_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _l1_obj_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _l1_obj_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _l1_obj_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_l1_obj_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _l1_obj_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _l1_obj_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _l1_obj_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _l1_obj_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _l1_obj_ G__T_l1_obj_;
static int G__kinematicsDict_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_l1_obj_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_l1_obj_*) (soff+(sizeof(_l1_obj_)*i)))->~G__T_l1_obj_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_l1_obj_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_l1_obj_*) (soff))->~G__T_l1_obj_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _l1_obj_* dest = (_l1_obj_*) G__getstructoffset();
   *dest = *(_l1_obj_*) libp->para[0].ref;
   const _l1_obj_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _supercluster_ */
static int G__kinematicsDict_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _supercluster_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _supercluster_[n];
     } else {
       p = new((void*) gvp) _supercluster_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _supercluster_;
     } else {
       p = new((void*) gvp) _supercluster_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _supercluster_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _supercluster_(*(_supercluster_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _supercluster_(*(_supercluster_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _supercluster_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _supercluster_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _supercluster_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _supercluster_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_supercluster_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _supercluster_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _supercluster_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _supercluster_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _supercluster_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _supercluster_ G__T_supercluster_;
static int G__kinematicsDict_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_supercluster_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_supercluster_*) (soff+(sizeof(_supercluster_)*i)))->~G__T_supercluster_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_supercluster_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_supercluster_*) (soff))->~G__T_supercluster_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _supercluster_* dest = (_supercluster_*) G__getstructoffset();
   *dest = *(_supercluster_*) libp->para[0].ref;
   const _supercluster_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _photon_ */
static int G__kinematicsDict_244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _photon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _photon_[n];
     } else {
       p = new((void*) gvp) _photon_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _photon_;
     } else {
       p = new((void*) gvp) _photon_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__photon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _photon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _photon_(*(_photon_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _photon_(*(_photon_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__photon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _photon_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _photon_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _photon_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _photon_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_photon_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _photon_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _photon_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _photon_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _photon_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _photon_ G__T_photon_;
static int G__kinematicsDict_244_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_photon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_photon_*) (soff+(sizeof(_photon_)*i)))->~G__T_photon_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_photon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_photon_*) (soff))->~G__T_photon_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _photon_* dest = (_photon_*) G__getstructoffset();
   *dest = *(_photon_*) libp->para[0].ref;
   const _photon_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _electron_ */
static int G__kinematicsDict_245_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _electron_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _electron_[n];
     } else {
       p = new((void*) gvp) _electron_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _electron_;
     } else {
       p = new((void*) gvp) _electron_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__electron_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _electron_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _electron_(*(_electron_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _electron_(*(_electron_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__electron_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _electron_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _electron_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _electron_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _electron_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_electron_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _electron_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _electron_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _electron_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _electron_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _electron_ G__T_electron_;
static int G__kinematicsDict_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_electron_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_electron_*) (soff+(sizeof(_electron_)*i)))->~G__T_electron_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_electron_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_electron_*) (soff))->~G__T_electron_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _electron_* dest = (_electron_*) G__getstructoffset();
   *dest = *(_electron_*) libp->para[0].ref;
   const _electron_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _beam_spot_ */
static int G__kinematicsDict_246_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _beam_spot_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _beam_spot_[n];
     } else {
       p = new((void*) gvp) _beam_spot_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _beam_spot_;
     } else {
       p = new((void*) gvp) _beam_spot_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _beam_spot_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _beam_spot_(*(_beam_spot_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _beam_spot_(*(_beam_spot_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _beam_spot_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _beam_spot_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _beam_spot_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _beam_spot_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_beam_spot_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _beam_spot_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _beam_spot_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _beam_spot_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _beam_spot_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _beam_spot_ G__T_beam_spot_;
static int G__kinematicsDict_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_beam_spot_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_beam_spot_*) (soff+(sizeof(_beam_spot_)*i)))->~G__T_beam_spot_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_beam_spot_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_beam_spot_*) (soff))->~G__T_beam_spot_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _beam_spot_* dest = (_beam_spot_*) G__getstructoffset();
   *dest = *(_beam_spot_*) libp->para[0].ref;
   const _beam_spot_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _muon_ */
static int G__kinematicsDict_247_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _muon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _muon_[n];
     } else {
       p = new((void*) gvp) _muon_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _muon_;
     } else {
       p = new((void*) gvp) _muon_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__muon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _muon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _muon_(*(_muon_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _muon_(*(_muon_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__muon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _muon_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _muon_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _muon_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _muon_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_muon_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _muon_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _muon_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _muon_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_247_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _muon_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _muon_ G__T_muon_;
static int G__kinematicsDict_247_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_muon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_muon_*) (soff+(sizeof(_muon_)*i)))->~G__T_muon_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_muon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_muon_*) (soff))->~G__T_muon_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_247_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _muon_* dest = (_muon_*) G__getstructoffset();
   *dest = *(_muon_*) libp->para[0].ref;
   const _muon_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _gen_jet_ */
static int G__kinematicsDict_248_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_jet_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_jet_[n];
     } else {
       p = new((void*) gvp) _gen_jet_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _gen_jet_;
     } else {
       p = new((void*) gvp) _gen_jet_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_jet_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _gen_jet_(*(_gen_jet_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _gen_jet_(*(_gen_jet_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _gen_jet_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_jet_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _gen_jet_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _gen_jet_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_gen_jet_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_jet_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_jet_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _gen_jet_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_248_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _gen_jet_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _gen_jet_ G__T_gen_jet_;
static int G__kinematicsDict_248_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_gen_jet_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_gen_jet_*) (soff+(sizeof(_gen_jet_)*i)))->~G__T_gen_jet_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_gen_jet_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_gen_jet_*) (soff))->~G__T_gen_jet_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_248_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _gen_jet_* dest = (_gen_jet_*) G__getstructoffset();
   *dest = *(_gen_jet_*) libp->para[0].ref;
   const _gen_jet_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _jet_ */
static int G__kinematicsDict_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _jet_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _jet_[n];
     } else {
       p = new((void*) gvp) _jet_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _jet_;
     } else {
       p = new((void*) gvp) _jet_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__jet_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _jet_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _jet_(*(_jet_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _jet_(*(_jet_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__jet_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _jet_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _jet_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _jet_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _jet_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_jet_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _jet_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _jet_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _jet_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _jet_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _jet_ G__T_jet_;
static int G__kinematicsDict_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_jet_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_jet_*) (soff+(sizeof(_jet_)*i)))->~G__T_jet_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_jet_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_jet_*) (soff))->~G__T_jet_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _jet_* dest = (_jet_*) G__getstructoffset();
   *dest = *(_jet_*) libp->para[0].ref;
   const _jet_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _di_jet_ */
static int G__kinematicsDict_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _di_jet_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _di_jet_[n];
     } else {
       p = new((void*) gvp) _di_jet_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _di_jet_;
     } else {
       p = new((void*) gvp) _di_jet_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _di_jet_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _di_jet_(*(_di_jet_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _di_jet_(*(_di_jet_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _di_jet_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _di_jet_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _di_jet_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _di_jet_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_di_jet_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _di_jet_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _di_jet_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _di_jet_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _di_jet_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _di_jet_ G__T_di_jet_;
static int G__kinematicsDict_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_di_jet_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_di_jet_*) (soff+(sizeof(_di_jet_)*i)))->~G__T_di_jet_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_di_jet_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_di_jet_*) (soff))->~G__T_di_jet_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _di_jet_* dest = (_di_jet_*) G__getstructoffset();
   *dest = *(_di_jet_*) libp->para[0].ref;
   const _di_jet_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _W_ */
static int G__kinematicsDict_251_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _W_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _W_[n];
     } else {
       p = new((void*) gvp) _W_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _W_;
     } else {
       p = new((void*) gvp) _W_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__W_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _W_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _W_(*(_W_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _W_(*(_W_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__W_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _W_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _W_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _W_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _W_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_W_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _W_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _W_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _W_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_251_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _W_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _W_ G__T_W_;
static int G__kinematicsDict_251_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_W_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_W_*) (soff+(sizeof(_W_)*i)))->~G__T_W_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_W_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_W_*) (soff))->~G__T_W_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_251_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _W_* dest = (_W_*) G__getstructoffset();
   *dest = *(_W_*) libp->para[0].ref;
   const _W_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _di_lepton_ */
static int G__kinematicsDict_252_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _di_lepton_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _di_lepton_[n];
     } else {
       p = new((void*) gvp) _di_lepton_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _di_lepton_;
     } else {
       p = new((void*) gvp) _di_lepton_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _di_lepton_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _di_lepton_(*(_di_lepton_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _di_lepton_(*(_di_lepton_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _di_lepton_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _di_lepton_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _di_lepton_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _di_lepton_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_di_lepton_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _di_lepton_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _di_lepton_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _di_lepton_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_252_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _di_lepton_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _di_lepton_ G__T_di_lepton_;
static int G__kinematicsDict_252_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_di_lepton_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_di_lepton_*) (soff+(sizeof(_di_lepton_)*i)))->~G__T_di_lepton_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_di_lepton_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_di_lepton_*) (soff))->~G__T_di_lepton_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_252_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _di_lepton_* dest = (_di_lepton_*) G__getstructoffset();
   *dest = *(_di_lepton_*) libp->para[0].ref;
   const _di_lepton_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _tri_lepton_ */
static int G__kinematicsDict_253_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _tri_lepton_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _tri_lepton_[n];
     } else {
       p = new((void*) gvp) _tri_lepton_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _tri_lepton_;
     } else {
       p = new((void*) gvp) _tri_lepton_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _tri_lepton_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _tri_lepton_(*(_tri_lepton_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _tri_lepton_(*(_tri_lepton_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _tri_lepton_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _tri_lepton_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _tri_lepton_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _tri_lepton_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_tri_lepton_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _tri_lepton_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _tri_lepton_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _tri_lepton_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_253_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _tri_lepton_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _tri_lepton_ G__T_tri_lepton_;
static int G__kinematicsDict_253_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_tri_lepton_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_tri_lepton_*) (soff+(sizeof(_tri_lepton_)*i)))->~G__T_tri_lepton_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_tri_lepton_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_tri_lepton_*) (soff))->~G__T_tri_lepton_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_253_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _tri_lepton_* dest = (_tri_lepton_*) G__getstructoffset();
   *dest = *(_tri_lepton_*) libp->para[0].ref;
   const _tri_lepton_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _quar_lepton_ */
static int G__kinematicsDict_254_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _quar_lepton_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _quar_lepton_[n];
     } else {
       p = new((void*) gvp) _quar_lepton_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _quar_lepton_;
     } else {
       p = new((void*) gvp) _quar_lepton_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _quar_lepton_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _quar_lepton_(*(_quar_lepton_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _quar_lepton_(*(_quar_lepton_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _quar_lepton_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _quar_lepton_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _quar_lepton_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _quar_lepton_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_quar_lepton_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _quar_lepton_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _quar_lepton_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _quar_lepton_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _quar_lepton_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _quar_lepton_ G__T_quar_lepton_;
static int G__kinematicsDict_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_quar_lepton_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_quar_lepton_*) (soff+(sizeof(_quar_lepton_)*i)))->~G__T_quar_lepton_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_quar_lepton_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_quar_lepton_*) (soff))->~G__T_quar_lepton_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _quar_lepton_* dest = (_quar_lepton_*) G__getstructoffset();
   *dest = *(_quar_lepton_*) libp->para[0].ref;
   const _quar_lepton_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _lepton_photon_ */
static int G__kinematicsDict_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _lepton_photon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _lepton_photon_[n];
     } else {
       p = new((void*) gvp) _lepton_photon_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _lepton_photon_;
     } else {
       p = new((void*) gvp) _lepton_photon_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _lepton_photon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _lepton_photon_(*(_lepton_photon_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _lepton_photon_(*(_lepton_photon_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _lepton_photon_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _lepton_photon_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _lepton_photon_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _lepton_photon_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_lepton_photon_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _lepton_photon_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _lepton_photon_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _lepton_photon_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _lepton_photon_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _lepton_photon_ G__T_lepton_photon_;
static int G__kinematicsDict_255_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_lepton_photon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_lepton_photon_*) (soff+(sizeof(_lepton_photon_)*i)))->~G__T_lepton_photon_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_lepton_photon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_lepton_photon_*) (soff))->~G__T_lepton_photon_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _lepton_photon_* dest = (_lepton_photon_*) G__getstructoffset();
   *dest = *(_lepton_photon_*) libp->para[0].ref;
   const _lepton_photon_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _dilepton_photon_ */
static int G__kinematicsDict_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _dilepton_photon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _dilepton_photon_[n];
     } else {
       p = new((void*) gvp) _dilepton_photon_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _dilepton_photon_;
     } else {
       p = new((void*) gvp) _dilepton_photon_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _dilepton_photon_* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new _dilepton_photon_(*(_dilepton_photon_*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) _dilepton_photon_(*(_dilepton_photon_*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _dilepton_photon_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _dilepton_photon_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _dilepton_photon_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _dilepton_photon_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_dilepton_photon_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _dilepton_photon_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _dilepton_photon_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _dilepton_photon_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _dilepton_photon_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _dilepton_photon_ G__T_dilepton_photon_;
static int G__kinematicsDict_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_dilepton_photon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_dilepton_photon_*) (soff+(sizeof(_dilepton_photon_)*i)))->~G__T_dilepton_photon_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_dilepton_photon_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_dilepton_photon_*) (soff))->~G__T_dilepton_photon_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _dilepton_photon_* dest = (_dilepton_photon_*) G__getstructoffset();
   *dest = *(_dilepton_photon_*) libp->para[0].ref;
   const _dilepton_photon_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* _event_ */
static int G__kinematicsDict_257_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _event_* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _event_[n];
     } else {
       p = new((void*) gvp) _event_[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new _event_;
     } else {
       p = new((void*) gvp) _event_;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__event_));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setEventNum((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setRunNum((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setLumiBlock((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setBunchCrossing((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setOrbitNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setTimeLow((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setTimeHigh((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setEventWeight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->setBField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTNonIsoElectrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTElectrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTElectronLs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTElectronLleg1s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTElectronLleg2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTMuonElectrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTElectronMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTNonIsoMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTMuonLs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTMuonLleg1s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTMuonLleg2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getVertices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getSuperclusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getElectrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getL1Objs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getGenJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getAKGenJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getCaloJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getJPTJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getPFJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getSimTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getWs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getDileptons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getDijets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getTrileptons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getQuarleptons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getLeptonPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getDileptonPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getLeptonTrkPairs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getTrgBits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getBeamSpot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getEventFilterBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getGenEventInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getGenTTbar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getGenDrellYan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getMCInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getGenWZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getRunInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getHLTInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getMETs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->getDiLeadingJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTNonIsoMuon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTMuon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTMuonL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTMuonLleg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTMuonLleg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTMuonElectron());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTElectronMuon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTNonIsoElectron());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTElectron());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTElectronL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTElectronLleg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addHLTElectronLleg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addSupercluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addPhoton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addElectron());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addL1Obj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addSimTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addGenJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addAKGenJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addCaloJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addJPTJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addPFJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addMuon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addW());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addDilepton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addDijet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addTrilepton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addQuarlepton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addLeptonPhoton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addDileptonPhoton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((_event_*) G__getstructoffset())->addLeptonTrkPair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) _event_::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _event_::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) _event_::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      _event_::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((_event_*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _event_::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _event_::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) _event_::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__kinematicsDict_257_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) _event_::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__kinematicsDict_257_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   _event_* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new _event_(*(_event_*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__kinematicsDictLN__event_));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef _event_ G__T_event_;
static int G__kinematicsDict_257_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (_event_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((_event_*) (soff+(sizeof(_event_)*i)))->~G__T_event_();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (_event_*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((_event_*) (soff))->~G__T_event_();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__kinematicsDict_257_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   _event_* dest = (_event_*) G__getstructoffset();
   *dest = *(_event_*) libp->para[0].ref;
   const _event_& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* _event_filterBit_ */

/* _gen_eventInfo_ */

/* _mc_process_ */

/* _gen_ttbar_ */

/* _gen_DrellYan_ */

/* _genwz_ */

/* _vec4_ */

/* _met_ */

/* _track_ */

/* _trg_bits_ */

/* _hlt_info_ */

/* _mets_ */

/* _dileadingjets_ */

/* _run_info_ */

/* _vertex_ */

/* _l1_obj_ */

/* _supercluster_ */

/* _photon_ */

/* _electron_ */

/* _beam_spot_ */

/* _muon_ */

/* _gen_jet_ */

/* _jet_ */

/* _di_jet_ */

/* _W_ */

/* _di_lepton_ */

/* _tri_lepton_ */

/* _quar_lepton_ */

/* _lepton_photon_ */

/* _dilepton_photon_ */

/* _event_ */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunckinematicsDict {
 public:
  G__Sizep2memfunckinematicsDict(): p(&G__Sizep2memfunckinematicsDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunckinematicsDict::*p)();
};

size_t G__get_sizep2memfunckinematicsDict()
{
  G__Sizep2memfunckinematicsDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancekinematicsDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_))) {
     _event_filterBit_ *G__Lderived;
     G__Lderived=(_event_filterBit_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_))) {
     _gen_eventInfo_ *G__Lderived;
     G__Lderived=(_gen_eventInfo_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_))) {
     _mc_process_ *G__Lderived;
     G__Lderived=(_mc_process_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_))) {
     _gen_ttbar_ *G__Lderived;
     G__Lderived=(_gen_ttbar_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_))) {
     _gen_DrellYan_ *G__Lderived;
     G__Lderived=(_gen_DrellYan_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__genwz_))) {
     _genwz_ *G__Lderived;
     G__Lderived=(_genwz_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__genwz_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__vec4_))) {
     _vec4_ *G__Lderived;
     G__Lderived=(_vec4_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__vec4_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__met_))) {
     _met_ *G__Lderived;
     G__Lderived=(_met_*)0x1000;
     {
       _vec4_ *G__Lpbase=(_vec4_*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__met_),G__get_linked_tagnum(&G__kinematicsDictLN__vec4_),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__met_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__track_))) {
     _track_ *G__Lderived;
     G__Lderived=(_track_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__track_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_))) {
     _trg_bits_ *G__Lderived;
     G__Lderived=(_trg_bits_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_))) {
     _hlt_info_ *G__Lderived;
     G__Lderived=(_hlt_info_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__mets_))) {
     _mets_ *G__Lderived;
     G__Lderived=(_mets_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__mets_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_))) {
     _dileadingjets_ *G__Lderived;
     G__Lderived=(_dileadingjets_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__run_info_))) {
     _run_info_ *G__Lderived;
     G__Lderived=(_run_info_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__run_info_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__vertex_))) {
     _vertex_ *G__Lderived;
     G__Lderived=(_vertex_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__vertex_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_))) {
     _l1_obj_ *G__Lderived;
     G__Lderived=(_l1_obj_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_))) {
     _supercluster_ *G__Lderived;
     G__Lderived=(_supercluster_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__photon_))) {
     _photon_ *G__Lderived;
     G__Lderived=(_photon_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__photon_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__electron_))) {
     _electron_ *G__Lderived;
     G__Lderived=(_electron_*)0x1000;
     {
       _track_ *G__Lpbase=(_track_*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__electron_),G__get_linked_tagnum(&G__kinematicsDictLN__track_),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__electron_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_))) {
     _beam_spot_ *G__Lderived;
     G__Lderived=(_beam_spot_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__muon_))) {
     _muon_ *G__Lderived;
     G__Lderived=(_muon_*)0x1000;
     {
       _track_ *G__Lpbase=(_track_*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__muon_),G__get_linked_tagnum(&G__kinematicsDictLN__track_),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__muon_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_))) {
     _gen_jet_ *G__Lderived;
     G__Lderived=(_gen_jet_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__jet_))) {
     _jet_ *G__Lderived;
     G__Lderived=(_jet_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__jet_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_))) {
     _di_jet_ *G__Lderived;
     G__Lderived=(_di_jet_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__W_))) {
     _W_ *G__Lderived;
     G__Lderived=(_W_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__W_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_))) {
     _di_lepton_ *G__Lderived;
     G__Lderived=(_di_lepton_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_))) {
     _tri_lepton_ *G__Lderived;
     G__Lderived=(_tri_lepton_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_))) {
     _quar_lepton_ *G__Lderived;
     G__Lderived=(_quar_lepton_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_))) {
     _lepton_photon_ *G__Lderived;
     G__Lderived=(_lepton_photon_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_))) {
     _dilepton_photon_ *G__Lderived;
     G__Lderived=(_dilepton_photon_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__kinematicsDictLN__event_))) {
     _event_ *G__Lderived;
     G__Lderived=(_event_*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__kinematicsDictLN__event_),G__get_linked_tagnum(&G__kinematicsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablekinematicsDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__kinematicsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__kinematicsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__kinematicsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__kinematicsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__kinematicsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__kinematicsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__kinematicsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__kinematicsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__kinematicsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__kinematicsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__kinematicsDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* _event_filterBit_ */
static void G__setup_memvar_event_filterBit_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_));
   { _event_filterBit_ *p; p=(_event_filterBit_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->trackingFailureFilter)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"trackingFailureFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EcalDeadCellTriggerPrimitiveFilter)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"EcalDeadCellTriggerPrimitiveFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalLaserCorrFilter)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"ecalLaserCorrFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eeBadScFilter)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eeBadScFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalLaserEventFilter)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hcalLaserEventFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CSCTightHaloFilter)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CSCTightHaloFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genericFilter0)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"genericFilter0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genericFilter1)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"genericFilter1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genericFilter2)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"genericFilter2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _gen_eventInfo_ */
static void G__setup_memvar_gen_eventInfo_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_));
   { _gen_eventInfo_ *p; p=(_gen_eventInfo_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flav1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flav1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flav2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flav2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfx1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xfx1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfx2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xfx2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scalePDF)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"scalePDF=",0,"Q valued used in PDF evolution.");
   G__memvar_setup((void*)((long)(&p->weight)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"weight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->signalProcessID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"signalProcessID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qScale)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"qScale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alphaQCD)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"alphaQCD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alphaQED)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"alphaQED=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasPDF)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasPDF=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _mc_process_ */
static void G__setup_memvar_mc_process_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_));
   { _mc_process_ *p; p=(_mc_process_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->mpi)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mpi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->processId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"processId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxBarcode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"vtxBarcode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventScale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eventScale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alphaQCD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"alphaQCD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alphaQED)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"alphaQED=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flav1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flav1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flav2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flav2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfx1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xfx1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfx2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xfx2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scalePDF)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scalePDF=",0,"Q valued used in PDF evolution.");
   G__memvar_setup((void*)((long)(&p->decayType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"decayType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"bosId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bosPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bosPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bosMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bosEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosRap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bosRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dileptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dileptonPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dileptonMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dileptonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dileptonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonRap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dileptonRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosTheta=",0,"simple two-body decay angle");
   G__memvar_setup((void*)((long)(&p->cosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nphotons)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nphotons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonId=",0,"particle");
   G__memvar_setup((void*)((long)(&p->muonBarEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonBarEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonBarPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonBarPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonBarPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonBarPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonBarEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonBarEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonBarPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonBarPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonBarId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonBarId=",0,"anti particle");
   G__memvar_setup((void*)((long)(&p->nrmuonEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonId=",0,"particle");
   G__memvar_setup((void*)((long)(&p->nrmuonBarEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonBarEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonBarPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonBarPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonBarPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonBarPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonBarEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonBarEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonBarPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonBarPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrmuonBarId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nrmuonBarId=",0,"anti particle");
   G__memvar_setup((void*)((long)(&p->photonEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonAngle)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosThetaCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosThetaCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sin2ThetaCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sin2ThetaCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tanPhiCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tanPhiCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->corCosThetaCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"corCosThetaCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->corSin2ThetaCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"corSin2ThetaCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->corTanPhiCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"corTanPhiCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sameSign)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sameSign=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qqbar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qqbar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qbarq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qbarq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mistag)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mistag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->metX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"metX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->metY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"metY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->delta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"delta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fprob)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fprob=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bprob)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bprob=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _gen_ttbar_ */
static void G__setup_memvar_gen_ttbar_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_));
   { _gen_ttbar_ *p; p=(_gen_ttbar_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ttbarPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ttbarPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ttbarM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ttbarM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ttbarEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ttbarEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ttbarPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ttbarPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1Pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1Eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1M)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1M=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1Phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1ID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1ID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2Pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2Eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2M)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2M=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2Phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2ID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2ID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twlPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twlPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twlM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twlM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twlEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twlEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twlPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twlPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twlID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twlID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twvPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twvPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twvM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twvM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twvEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twvEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twvPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twvPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->twvID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"twvID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tjPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tjPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tjM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tjM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tjEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tjEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tjPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tjPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tjID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tjID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwlPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwlPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwlM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwlM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwlEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwlEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwlPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwlPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwlID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwlID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwvPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwvPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwvM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwvM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwvEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwvEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwvPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwvPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarwvID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarwvID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarbPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarbPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarbM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarbM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarbEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarbEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarbPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarbPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarbID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarbID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarjPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarjPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarjM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarjM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarjEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarjEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarjPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarjPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tbarjID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tbarjID=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _gen_DrellYan_ */
static void G__setup_memvar_gen_DrellYan_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_));
   { _gen_DrellYan_ *p; p=(_gen_DrellYan_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->mom1Pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1Eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1M)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1M=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1Phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom1ID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom1ID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2Pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2Eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2M)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2M=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2Phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mom2ID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mom2ID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bosPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bosEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bosM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bosID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"bosID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugPtFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugPtFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugEtaFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugEtaFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugMFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugMFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugPhiFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugPhiFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugPtDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugPtDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugEtaDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugEtaDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugMDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugMDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdaugPhiDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdaugPhiDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugPtFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugPtFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugEtaFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugEtaFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugMFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugMFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugPhiFSR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugPhiFSR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugPtDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugPtDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugEtaDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugEtaDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugMDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugMDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mdaugPhiDress)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mdaugPhiDress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfJets)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jpid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jpid[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jv4)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jv4[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numOfParticles)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numOfParticles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mev4)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mev4[12][5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mepid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mepid[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _genwz_ */
static void G__setup_memvar_genwz_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__genwz_));
   { _genwz_ *p; p=(_genwz_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Z_decayType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Z_decayType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Z_bosId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_bosPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_bosPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_bosMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_bosEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_bosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_bosRap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_bosRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauAEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauAEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauAPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauAPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauAPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauAPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauAEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauAEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauAPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauAPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauAId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauAId=",0,"particle");
   G__memvar_setup((void*)((long)(&p->Z_dauBEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauBEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauBPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauBPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauBPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauBPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauBEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauBEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauBPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauBPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dauBId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dauBId=",0,"anti particle");
   G__memvar_setup((void*)((long)(&p->Z_dileptonPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dileptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dileptonPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dileptonPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dileptonMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dileptonMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dileptonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dileptonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dileptonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dileptonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_dileptonRap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_dileptonRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_cosTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_cosTheta=",0,"simple two-body decay angle");
   G__memvar_setup((void*)((long)(&p->Z_cosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_cosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_nphotons)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_nphotons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_phoEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_phoEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_phoPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_phoPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_phoEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_phoEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z_phoAngle)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z_phoAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_decayType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"W_decayType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"W_bosId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_bosPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_bosPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_bosMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_bosEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_bosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_bosRap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_bosRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauAEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauAEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauAPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauAPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauAPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauAPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauAEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauAEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauAPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauAPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauAId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauAId=",0,"particle");
   G__memvar_setup((void*)((long)(&p->W_dauBEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauBEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauBPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauBPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauBPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauBPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauBEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauBEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauBPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauBPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dauBId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dauBId=",0,"anti particle");
   G__memvar_setup((void*)((long)(&p->W_dileptonPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dileptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dileptonPz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dileptonPz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dileptonMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dileptonMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dileptonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dileptonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dileptonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dileptonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_dileptonRap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_dileptonRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_cosTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_cosTheta=",0,"simple two-body decay angle");
   G__memvar_setup((void*)((long)(&p->W_cosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_cosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_nphotons)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_nphotons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_phoEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_phoEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_phoPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_phoPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_phoEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_phoEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->W_phoAngle)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"W_phoAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gdWZ)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gdWZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_Pz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_Pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_Mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_Rap)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_Rap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_cosAngZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_cosAngZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WZ_cosAngW)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"WZ_cosAngW=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _vec4_ */
static void G__setup_memvar_vec4_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__vec4_));
   { _vec4_ *p; p=(_vec4_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _met_ */
static void G__setup_memvar_met_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__met_));
   { _met_ *p; p=(_met_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_longitudinal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e_longitudinal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HadronicEtFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"HadronicEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EMEtFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"EMEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MuonEtFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MuonEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->InvisibleEtFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"InvisibleEtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _track_ */
static void G__setup_memvar_track_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__track_));
   { _track_ *p; p=(_track_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->vertexIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"vertexIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->associatedVertex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"associatedVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->closestVertexDist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"closestVertexDist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normalizedChi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ptError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"etaError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phiError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qoverp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qoverp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qoverpError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qoverpError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lambda)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lambda=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lambdaError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lambdaError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dxy0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dxy0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dz0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dz0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dsz0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dsz0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dsz0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dsz0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dsz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dsz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dxyVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dzVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dszVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dszVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->recHitsSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"recHitsSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerOk)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outerOk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nStereoHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nStereoHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerRadius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->innerRadius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"innerRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidPixelHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidStripHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidStripHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidPixelBarrelHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidPixelBarrelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidTrackerLayers)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidTrackerLayers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackerLayersWithMeasurement)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackerLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pixelLayersWithMeasurement)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pixelLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pixelBarrelLayersWithMeasurement)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pixelBarrelLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pixelEndcapLayersWithMeasurement)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pixelEndcapLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasValidHitInFirstPixelBarrel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasValidHitInFirstPixelBarrel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackerExpectedHitsInner_numberOfHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackerExpectedHitsInner_numberOfHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mcType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mcPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mcEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mcPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _trg_bits_ */
static void G__setup_memvar_trg_bits_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_));
   { _trg_bits_ *p; p=(_trg_bits_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->l1TrgBits)-(long)(p)),107,0,0,-1,G__defined_typename("ULong_t"),-1,1,"l1TrgBits[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l1tTrgBits)-(long)(p)),107,0,0,-1,G__defined_typename("ULong_t"),-1,1,"l1tTrgBits[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltAccTrgBits)-(long)(p)),107,0,0,-1,G__defined_typename("ULong_t"),-1,1,"hltAccTrgBits[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltRunTrgBits)-(long)(p)),107,0,0,-1,G__defined_typename("ULong_t"),-1,1,"hltRunTrgBits[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltErrTrgBits)-(long)(p)),107,0,0,-1,G__defined_typename("ULong_t"),-1,1,"hltErrTrgBits[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _hlt_info_ */
static void G__setup_memvar_hlt_info_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_));
   { _hlt_info_ *p; p=(_hlt_info_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->HLT_NonIsoMuon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_NonIsoMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_Muon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_Muon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_MuonL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_MuonL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_MuonElectron)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_MuonElectron=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_ElectronMuon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_ElectronMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_NonIsoElectron)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_NonIsoElectron=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_Electron)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_Electron=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLT_ElectronL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HLT_ElectronL=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _mets_ */
static void G__setup_memvar_mets_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__mets_));
   { _mets_ *p; p=(_mets_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->caloMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"caloMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tcMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"tcMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonJESCorSC5MET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"muonJESCorSC5MET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"genMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rawMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"rawMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfType1CorrectedMet)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfType1CorrectedMet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfType1p2CorrectedMet)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfType1p2CorrectedMet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMetT0pc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMetT0pc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMetT0pcT1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMetT0pcT1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMetT0pcTxy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMetT0pcTxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMetT0pcT1Txy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMetT0pcT1Txy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMetT1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMetT1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMetT1Txy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__met_),-1,-1,1,"pfMetT1Txy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _dileadingjets_ */
static void G__setup_memvar_dileadingjets_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_));
   { _dileadingjets_ *p; p=(_dileadingjets_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtA)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtAType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtAType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtBType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtBType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ptx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pty)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pty=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _run_info_ */
static void G__setup_memvar_run_info_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__run_info_));
   { _run_info_ *p; p=(_run_info_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->autoXSec)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"autoXSec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->extXsec)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"extXsec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->filterEff)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"filterEff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _vertex_ */
static void G__setup_memvar_vertex_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__vertex_));
   { _vertex_ *p; p=(_vertex_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->isValid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isFake)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isFake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"yError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"zError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tracksSize)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tracksSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normalizedChi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validTracksSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"validTracksSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validTracksSize200MeV)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"validTracksSize200MeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validTracksSize500MeV)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"validTracksSize500MeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validTracksSize1GeV)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"validTracksSize1GeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPtMin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPtMin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPtMin200MeV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPtMin200MeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPtMin500MeV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPtMin500MeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPtMin1GeV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPtMin1GeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPt2Min)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPt2Min=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPt2Min200MeV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPt2Min200MeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPt2Min500MeV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPt2Min500MeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumPt2Min1GeV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumPt2Min1GeV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thrust)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thrust=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sphericity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sphericity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->planarity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"planarity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aplanarity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"aplanarity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"muonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thrust_x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thrust_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thrust_y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thrust_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thrust_z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thrust_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _l1_obj_ */
static void G__setup_memvar_l1_obj_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_));
   { _l1_obj_ *p; p=(_l1_obj_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->triggerInfo)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"triggerInfo=",0,"1/0xxxxyyyy: xxxx trigger bits belonging; yyyy data type");
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _supercluster_ */
static void G__setup_memvar_supercluster_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_));
   { _supercluster_ *p; p=(_supercluster_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasPixelSeed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasPixelSeed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasConversionTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasConversionTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fiducialFlags)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fiducialFlags=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaEtaEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaEtaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaIetaIeta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e1x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e1x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e2x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e2x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e3x3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e3x3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e5x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxEnergyXtal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"maxEnergyXtal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicDepth1OverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicDepth1OverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicDepth2OverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicDepth2OverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicOverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r1x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r1x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r2x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r2x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r9)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scRawEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scRawEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPreshowerEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPreshowerEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhiWidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPhiWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEtaWidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEtaWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scClustersSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"scClustersSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cluster2ndMoments_sMaj)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cluster2ndMoments_sMaj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cluster2ndMoments_sMin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cluster2ndMoments_sMin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cluster2ndMoments_alpha)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cluster2ndMoments_alpha=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _photon_ */
static void G__setup_memvar_photon_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__photon_));
   { _photon_ *p; p=(_photon_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasPixelSeed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasPixelSeed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasConversionTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasConversionTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fiducialFlags)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fiducialFlags=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaEtaEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaEtaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaIetaIeta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e1x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e1x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e2x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e2x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e3x3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e3x3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e5x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxEnergyXtal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"maxEnergyXtal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicDepth1OverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicDepth1OverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicDepth2OverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicDepth2OverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicOverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r1x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r1x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r2x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r2x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r9)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalRecHitSumEtConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ecalRecHitSumEtConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalTowerSumEtConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalTowerSumEtConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalDepth1TowerSumEtConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalDepth1TowerSumEtConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalDepth2TowerSumEtConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalDepth2TowerSumEtConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkSumPtSolidConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trkSumPtSolidConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkSumPtHollowConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trkSumPtHollowConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTrkSolidConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nTrkSolidConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTrkHollowConeDR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nTrkHollowConeDR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalRecHitSumEtConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ecalRecHitSumEtConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalTowerSumEtConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalTowerSumEtConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalDepth1TowerSumEtConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalDepth1TowerSumEtConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalDepth2TowerSumEtConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalDepth2TowerSumEtConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkSumPtSolidConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trkSumPtSolidConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkSumPtHollowConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trkSumPtHollowConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTrkSolidConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nTrkSolidConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTrkHollowConeDR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nTrkHollowConeDR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scRawEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scRawEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPreshowerEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPreshowerEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhiWidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPhiWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEtaWidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEtaWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scClustersSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"scClustersSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cluster2ndMoments_sMaj)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cluster2ndMoments_sMaj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cluster2ndMoments_sMin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cluster2ndMoments_sMin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cluster2ndMoments_alpha)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cluster2ndMoments_alpha=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _electron_ */
static void G__setup_memvar_electron_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__electron_));
   { _electron_ *p; p=(_electron_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->classification)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"classification=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPixCharge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"scPixCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGsfCtfScPixChargeConsistent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isGsfCtfScPixChargeConsistent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGsfScPixChargeConsistent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isGsfScPixChargeConsistent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGsfCtfChargeConsistent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isGsfCtfChargeConsistent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalDrivenSeed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ecalDrivenSeed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackerDrivenSeed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackerDrivenSeed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validKF)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"validKF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_fbrem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_fbrem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_kfchi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_kfchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_gsfchi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_gsfchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_kfhits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fMVAVar_kfhits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_kfhitsall)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fMVAVar_kfhitsall=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_deta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_deta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_dphi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_dphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_detacalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_detacalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_dphicalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_dphicalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_see)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_see=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_spp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_spp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_sigmaIEtaIPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_sigmaIEtaIPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_etawidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_etawidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_phiwidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_phiwidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_e1x5e5x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_e1x5e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_R9)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_R9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_nbrems)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_nbrems=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_HoE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_HoE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_EoP)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_EoP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_IoEmIoP)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_IoEmIoP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_eleEoPout)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_eleEoPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_PreShowerOverRaw)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_PreShowerOverRaw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_EoPout)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_EoPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_d0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_ip3d)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_ip3d=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMVAVar_ip3dSig)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMVAVar_ip3dSig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->swissCross)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"swissCross=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dcot)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dcot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->radiusOfConversion)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"radiusOfConversion=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxFitConversion)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"vtxFitConversion=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mHits)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfLostHits)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"numberOfLostHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isElFromConversion)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isElFromConversion=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfExpectedInnerHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfExpectedInnerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaMissingHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"deltaMissingHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centroidZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroidZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"size=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scRawEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scRawEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPreshowerEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPreshowerEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhiWidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPhiWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEtaWidth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEtaWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scClustersSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"scClustersSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargeMode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"chargeMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qoverpMode)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qoverpMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lambdaMode)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lambdaMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptMode)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ptMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiMode)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phiMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaMode)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"etaMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qoverpModeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qoverpModeError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lambdaModeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lambdaModeError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptModeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ptModeError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiModeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phiModeError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaModeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"etaModeError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSuperClusterOverP)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSuperClusterOverP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSeedClusterOverP)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSeedClusterOverP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSeedClusterOverPout)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSeedClusterOverPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eEleClusterOverPout)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eEleClusterOverPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaEtaSuperClusterTrackAtVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaEtaSuperClusterTrackAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaEtaSeedClusterTrackAtCalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaEtaSeedClusterTrackAtCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaEtaEleClusterTrackAtCalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaEtaEleClusterTrackAtCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiEleClusterTrackAtCalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaPhiEleClusterTrackAtCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiSuperClusterTrackAtVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaPhiSuperClusterTrackAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiSeedClusterTrackAtCalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaPhiSeedClusterTrackAtCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fiducialFlags)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fiducialFlags=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr03TkSumPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr03TkSumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr03EcalRecHitSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr03EcalRecHitSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr03HcalDepth1TowerSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr03HcalDepth1TowerSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr03HcalDepth2TowerSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr03HcalDepth2TowerSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr03HcalTowerSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr03HcalTowerSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr04TkSumPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr04TkSumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr04EcalRecHitSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr04EcalRecHitSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr04HcalDepth1TowerSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr04HcalDepth1TowerSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr04HcalDepth2TowerSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr04HcalDepth2TowerSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dr04HcalTowerSumEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dr04HcalTowerSumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfRelIsoR03)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfRelIsoR03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->effArea)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"effArea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoCh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsoCh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoNeutral)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsoNeutral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoPhoton)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsoPhoton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsoSumPUPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsoSumPUPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfRelIsoR03EA)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfRelIsoR03EA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaEtaEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaEtaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaIetaIeta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->full5x5_sigmaIetaIeta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"full5x5_sigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e1x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e1x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e2x5Max)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e2x5Max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e5x5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalDepth1OverEcal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalDepth1OverEcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalDepth2OverEcal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalDepth2OverEcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalOverEcal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hcalOverEcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicOverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalDriven)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ecalDriven=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->passingCutBasedPreselection)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"passingCutBasedPreselection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->passingMvaPreselection)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"passingMvaPreselection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mva)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mva=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fbrem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fbrem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfBrems)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfBrems=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isMomentumCorrected)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isMomentumCorrected=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ecalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->correctedEcalEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"correctedEcalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackMomentumAtVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trackMomentumAtVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalEnergyError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ecalEnergyError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackMomentumError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trackMomentumError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronMomentumError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"electronMomentumError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ooemoop)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ooemoop=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->idBitMap)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"idBitMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaIdBitMap)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mvaIdBitMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->regressionEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"regressionEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->regressionEnergyError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"regressionEnergyError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedSCEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedSCEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedSCEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedSCEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedSCPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedSCPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibratedPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calibratedPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaTrigV0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mvaTrigV0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaNonTrigV0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mvaNonTrigV0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaTrigV0Cat)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mvaTrigV0Cat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaNonTrigV0Cat)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mvaNonTrigV0Cat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _beam_spot_ */
static void G__setup_memvar_beam_spot_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_));
   { _beam_spot_ *p; p=(_beam_spot_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaZError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaZError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthXError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"BeamWidthXError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthYError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"BeamWidthYError=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _muon_ */
static void G__setup_memvar_muon_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__muon_));
   { _muon_ *p; p=(_muon_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->muonType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"muonType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitCharge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"refitCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitPtError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitPtError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitEtaError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitEtaError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitPhiError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitPhiError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitDxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitDxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->refitDz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"refitDz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isHighPtMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isHighPtMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDxy0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDxy0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDz0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDz0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDsz0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDsz0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDxy0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDxy0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDz0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDz0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDsz0Error)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDsz0Error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDsz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDsz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDxyVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDxyVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDzVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDzVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalDszVtx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalDszVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalRecHitsSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"globalRecHitsSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalNumberOfValidHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"globalNumberOfValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalCharge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"globalCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalPtError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalPtError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalEtaError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalEtaError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalPhiError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalPhiError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalNormalizedChi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"globalNormalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalNumberOfValidMuonHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"globalNumberOfValidMuonHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerPtError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerPtError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerEtaError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerEtaError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerPhiError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"outerPhiError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerRecHitsSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outerRecHitsSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerNumberOfValidHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outerNumberOfValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerCharge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outerCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outerInnerOk)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outerInnerOk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->improvedMuonBestTrackPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"improvedMuonBestTrackPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->improvedMuonBestTrackPtError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"improvedMuonBestTrackPtError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->improvedMuonBestTrackEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"improvedMuonBestTrackEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->improvedMuonBestTrackPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"improvedMuonBestTrackPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->improvedMuonBestTrackCharge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"improvedMuonBestTrackCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isSoftMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isSoftMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTightMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isTightMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGlobalMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isGlobalMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isPFMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isPFMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackDxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackDxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackDz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackDz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackPtError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackPtError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestMuonBestTrackCharge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bestMuonBestTrackCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsolationR04)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsolationR04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsolationR04beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsolationR04beta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsolationWeighted)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsolationWeighted=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfIsolationPUPPI)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pfIsolationPUPPI=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfChambers)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfChambers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stationGapMaskPull)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"stationGapMaskPull=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfMatches)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfMatches=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stationMask)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"stationMask=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfMatchedStations)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfMatchedStations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timenDof)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"timenDof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTimeValid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isTimeValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIPInOut)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"timeAtIPInOut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIPInOutErr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"timeAtIPInOutErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIPOutIn)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"timeAtIPOutIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIPOutInErr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"timeAtIPOutInErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isCaloCompatibilityValid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isCaloCompatibilityValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caloCompatibility)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"caloCompatibility=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isIsolationValid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isIsolationValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03hadEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03hadEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03emEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03emEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03sumPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03sumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03nTracks)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03nJets)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03nJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03hoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03hoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05hadEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05hadEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05emEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05emEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05sumPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05sumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05nTracks)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05nJets)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05nJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05hoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05hoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03emVetoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03emVetoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03hadVetoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03hadVetoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR03hoVetoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR03hoVetoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05emVetoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05emVetoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05hadVetoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05hadVetoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isolationR05hoVetoEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"isolationR05hoVetoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEnergyValid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isEnergyValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyhad)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyhad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyho)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyecal_time)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyecal_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyhcal_time)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyhcal_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyecal_timeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyecal_timeError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyhcal_timeError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calEnergyhcal_timeError=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _gen_jet_ */
static void G__setup_memvar_gen_jet_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_));
   { _gen_jet_ *p; p=(_gen_jet_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mc_flavor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mc_flavor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nConstituent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nConstituent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _jet_ */
static void G__setup_memvar_jet_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__jet_));
   { _jet_ *p; p=(_jet_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->physicsEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"physicsEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->physicsPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"physicsPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->physicsPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"physicsPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nConstituent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nConstituent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L2L3pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L2L3pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L2L3scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L2L3scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L4scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L4scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L5scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L5scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L6scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L6scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L7scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L7scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L8scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L8scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scaleUnc)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scaleUnc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pileup)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pileup=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"area=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"L=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHPD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fHPD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRBX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRBX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n60)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"n60=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n90)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"n90=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emEnergyInEE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"emEnergyInEE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emEnergyInHF)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"emEnergyInHF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emEnergyInEB)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"emEnergyInEB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEnergyInHB)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadEnergyInHB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEnergyInHO)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadEnergyInHO=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEnergyInHF)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadEnergyInHF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEnergyInHE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hadEnergyInHE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"emEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energyFractionHadronic)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energyFractionHadronic=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxEInEmTowers)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"maxEInEmTowers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxEInHadTowers)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"maxEInHadTowers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"muonMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"chargedMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"electronMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedHadronEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargedHadronEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedHadronEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargedHadronEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutralHadronEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"neutralHadronEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutralHadronEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"neutralHadronEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedEmEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargedEmEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedEmEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargedEmEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutralEmEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"neutralEmEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutralEmEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"neutralEmEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zspCor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"zspCor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"electronEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"electronEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"muonEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HFHadronEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"HFHadronEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HFHadronEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"HFHadronEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HFEMEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"HFEMEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HFEMEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"HFEMEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedHadronMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"chargedHadronMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutralHadronMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"neutralHadronMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"photonMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HFHadronMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"HFHadronMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HFEMMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"HFEMMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedMuEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargedMuEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargedMuEnergyFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargedMuEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutralMultiplicity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"neutralMultiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quarkGluonLikelihood)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quarkGluonLikelihood=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quarkGluonMLP)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quarkGluonMLP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDFlag)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"puIDFlag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDMva)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"puIDMva=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"puIDLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDMedium)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"puIDMedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIDTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"puIDTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mc_flavor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mc_flavor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mc_pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mc_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mc_eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mc_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mc_phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mc_phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tag)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tag[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flavor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"flavor[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetVertexIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexFrac)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"jetVertexFrac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexnlIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetVertexnlIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexnlFrac)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"jetVertexnlFrac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexIndexNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetVertexIndexNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexFracNum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"jetVertexFracNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexnlIndexNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetVertexnlIndexNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexnlFracNum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"jetVertexnlFracNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexIndexSum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetVertexIndexSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexFracSum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"jetVertexFracSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexnlIndexSum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetVertexnlIndexSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetVertexnlFracSum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"jetVertexnlFracSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumN)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sumN=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totsum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"totsum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totsumS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"totsumS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totsumN)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"totsumN=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dissum5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dissum5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dissum5S)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dissum5S=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dissum5N)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dissum5N=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dissum10)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dissum10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dissum10S)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dissum10S=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dissum10N)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dissum10N=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _di_jet_ */
static void G__setup_memvar_di_jet_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_));
   { _di_jet_ *p; p=(_di_jet_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jetType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtA)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isValid)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totalChiSquared)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"totalChiSquared=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chiSquaredProbability)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chiSquaredProbability=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->degreesOfFreedom)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"degreesOfFreedom=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vxError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vxError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vyError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vyError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vzError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vzError=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _W_ */
static void G__setup_memvar_W_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__W_));
   { _W_ *p; p=(_W_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->leptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->recoWy1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"recoWy1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->recoWy2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"recoWy2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->delta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"delta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _di_lepton_ */
static void G__setup_memvar_di_lepton_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_));
   { _di_lepton_ *p; p=(_di_lepton_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfx1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xfx1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfx2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xfx2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mistag)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mistag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qqbar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qqbar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qbarq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"qbarq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtA)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtAType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtAType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->daughtBType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"daughtBType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isValid)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totalChiSquared)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"totalChiSquared=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chiSquaredProbability)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chiSquaredProbability=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->degreesOfFreedom)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"degreesOfFreedom=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fittedMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fittedMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vxError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vxError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vyError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vyError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vzError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vzError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosPhiFit)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosPhiFit=",0,"after refit");
   G__memvar_setup((void*)((long)(&p->cosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosPhi=",0,"angle between the two muons. ");
   G__memvar_setup((void*)((long)(&p->cosTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosTheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosThetaCS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosThetaCS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sin2Theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sin2Theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tanPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tanPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _tri_lepton_ */
static void G__setup_memvar_tri_lepton_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_));
   { _tri_lepton_ *p; p=(_tri_lepton_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->dileptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dileptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"m12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mt3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mt3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m23)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"m23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta23)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt23)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi23)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mt1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mt1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity23)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta23)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _quar_lepton_ */
static void G__setup_memvar_quar_lepton_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_));
   { _quar_lepton_ *p; p=(_quar_lepton_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dileptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIndex1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndex1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIndex2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndex2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"m12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m34)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"m34=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt34)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt34=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta34)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta34=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity34)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity34=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi34)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi34=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetaStar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thetaStar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _lepton_photon_ */
static void G__setup_memvar_lepton_photon_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_));
   { _lepton_photon_ *p; p=(_lepton_photon_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"photonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _dilepton_photon_ */
static void G__setup_memvar_dilepton_photon_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_));
   { _dilepton_photon_ *p; p=(_dilepton_photon_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dileptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"photonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rapidity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mll)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mll=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m1g)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"m1g=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2g)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"m2g=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* _event_ */
static void G__setup_memvar_event_(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__kinematicsDictLN__event_));
   { _event_ *p; p=(_event_*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eventNum)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"eventNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runNum)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"runNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumiBlock)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"lumiBlock=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bunchCrossing)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"bunchCrossing=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->orbitNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"orbitNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeLow)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"timeLow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeHigh)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"timeHigh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventWeight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eventWeight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BField)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"BField=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rho)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoIso)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rhoIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoCh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rhoCh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoCh2p4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rhoCh2p4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaIso)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaCh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaCh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaCh2p4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaCh2p4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoCHS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rhoCHS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoCalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rhoCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoTrack)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rhoTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaCHS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaCHS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaCalo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaTrack)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->simTrackNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"simTrackNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertexNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"vertexNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxPosX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vtxPosX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxPosY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vtxPosY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxPosZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vtxPosZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxPosXError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vtxPosXError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxPosYError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vtxPosYError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxPosZError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vtxPosZError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcVertexNumTruth)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mcVertexNumTruth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcVertexNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mcVertexNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcVertexNump1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mcVertexNump1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcVertexNumm1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mcVertexNumm1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"photonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->superclusterNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"superclusterNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"electronNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genJetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"genJetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->akGenJetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"akGenJetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caloJetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"caloJetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jptJetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jptJetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfJetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pfJetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"muonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"WNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quarleptonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"quarleptonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trileptonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trileptonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dileptonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dijetNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dijetNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonTrkPairNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonTrkPairNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonPhotonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonPhotonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonPhotonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dileptonPhotonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l1ObjNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"l1ObjNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltObjNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltObjNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trgBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_),-1,-1,1,"trgBits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltNonIsoElectronNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltNonIsoElectronNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltNonIsoElectrons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltNonIsoElectrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltElectronNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectrons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltElectrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronLNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltElectronLNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronLs)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltElectronLs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronLleg1Num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltElectronLleg1Num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronLleg1s)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltElectronLleg1s=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronLleg2Num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltElectronLleg2Num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronLleg2s)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltElectronLleg2s=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonElectronNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltMuonElectronNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonElectrons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltMuonElectrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronMuonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltElectronMuonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltElectronMuons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltElectronMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltNonIsoMuonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltNonIsoMuonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltNonIsoMuons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltNonIsoMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltMuonNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonLNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltMuonLNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonLs)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltMuonLs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonLleg1Num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltMuonLleg1Num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonLleg1s)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltMuonLleg1s=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonLleg2Num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hltMuonLleg2Num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltMuonLleg2s)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"hltMuonLleg2s=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertices)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"vertices=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->superclusters)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"superclusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"photons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electrons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"electrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l1Objs)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"l1Objs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tracks)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"tracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"jets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genJets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"genJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->akGenJets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"akGenJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caloJets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"caloJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jptJets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"jptJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfJets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"pfJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->simTracks)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"simTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"muons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ws)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"Ws=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"dileptons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dijets)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"dijets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trileptons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"trileptons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quarleptons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"quarleptons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonphotons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"leptonphotons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileptonphotons)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"dileptonphotons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonTrkPairs)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray),-1,-1,1,"leptonTrkPairs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beamSpot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_),-1,-1,1,"beamSpot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_),-1,-1,1,"mc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventFilterBit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_),-1,-1,1,"eventFilterBit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genEventInfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_),-1,-1,1,"genEventInfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genTTbar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_),-1,-1,1,"genTTbar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genDrellYan)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_),-1,-1,1,"genDrellYan=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genwz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__genwz_),-1,-1,1,"genwz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runInfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__run_info_),-1,-1,1,"runInfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hltInfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_),-1,-1,1,"hltInfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__mets_),-1,-1,1,"mets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dileadingjets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_),-1,-1,1,"dileadingjets=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__kinematicsDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarkinematicsDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunc_event_filterBit_(void) {
   /* _event_filterBit_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_));
   G__memfunc_setup("_event_filterBit_",1764,G__kinematicsDict_227_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_event_filterBit_",1764,G__kinematicsDict_227_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_), -1, 0, 1, 1, 1, 0, "u '_event_filterBit_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_227_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_227_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_event_filterBit_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_227_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_event_filterBit_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_227_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_event_filterBit_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_227_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_event_filterBit_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_227_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_227_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_event_filterBit_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_227_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_event_filterBit_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_227_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_event_filterBit_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_227_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_event_filterBit_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_event_filterBit_", 1890, G__kinematicsDict_227_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_227_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_), -1, 1, 1, 1, 1, 0, "u '_event_filterBit_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_gen_eventInfo_(void) {
   /* _gen_eventInfo_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_));
   G__memfunc_setup("_gen_eventInfo_",1541,G__kinematicsDict_228_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_gen_eventInfo_",1541,G__kinematicsDict_228_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_), -1, 0, 1, 1, 1, 0, "u '_gen_eventInfo_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_228_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_228_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_gen_eventInfo_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_228_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_eventInfo_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_228_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_gen_eventInfo_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_228_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_gen_eventInfo_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_228_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_228_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_eventInfo_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_228_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_eventInfo_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_228_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_eventInfo_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_228_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_eventInfo_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_gen_eventInfo_", 1667, G__kinematicsDict_228_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_228_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_), -1, 1, 1, 1, 1, 0, "u '_gen_eventInfo_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_mc_process_(void) {
   /* _mc_process_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_));
   G__memfunc_setup("_mc_process_",1260,G__kinematicsDict_229_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_mc_process_",1260,G__kinematicsDict_229_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_), -1, 0, 1, 1, 1, 0, "u '_mc_process_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_229_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_229_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_mc_process_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_229_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_mc_process_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_229_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_mc_process_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_229_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_mc_process_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_229_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_229_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_mc_process_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_229_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_mc_process_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_229_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_mc_process_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_229_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_mc_process_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_mc_process_", 1386, G__kinematicsDict_229_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_229_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_), -1, 1, 1, 1, 1, 0, "u '_mc_process_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_gen_ttbar_(void) {
   /* _gen_ttbar_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_));
   G__memfunc_setup("_gen_ttbar_",1140,G__kinematicsDict_230_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_gen_ttbar_",1140,G__kinematicsDict_230_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_), -1, 0, 1, 1, 1, 0, "u '_gen_ttbar_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_230_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_230_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_gen_ttbar_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_230_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_ttbar_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_230_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_gen_ttbar_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_230_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_gen_ttbar_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_230_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_230_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_ttbar_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_230_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_ttbar_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_230_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_ttbar_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_230_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_ttbar_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_gen_ttbar_", 1266, G__kinematicsDict_230_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_230_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_), -1, 1, 1, 1, 1, 0, "u '_gen_ttbar_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_gen_DrellYan_(void) {
   /* _gen_DrellYan_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_));
   G__memfunc_setup("_gen_DrellYan_",1394,G__kinematicsDict_231_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_gen_DrellYan_",1394,G__kinematicsDict_231_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_), -1, 0, 1, 1, 1, 0, "u '_gen_DrellYan_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_231_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_231_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_gen_DrellYan_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_231_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_DrellYan_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_231_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_gen_DrellYan_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_231_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_gen_DrellYan_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_231_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_231_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_DrellYan_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_231_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_DrellYan_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_231_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_DrellYan_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_231_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_DrellYan_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_gen_DrellYan_", 1520, G__kinematicsDict_231_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_231_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_), -1, 1, 1, 1, 1, 0, "u '_gen_DrellYan_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_genwz_(void) {
   /* _genwz_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__genwz_));
   G__memfunc_setup("_genwz_",745,G__kinematicsDict_232_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__genwz_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_genwz_",745,G__kinematicsDict_232_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__genwz_), -1, 0, 1, 1, 1, 0, "u '_genwz_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_232_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_232_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_genwz_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_232_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_genwz_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_232_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_genwz_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_232_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_genwz_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_232_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_232_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_genwz_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_232_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_genwz_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_232_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_genwz_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_232_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_genwz_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_genwz_", 871, G__kinematicsDict_232_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_232_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__genwz_), -1, 1, 1, 1, 1, 0, "u '_genwz_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_vec4_(void) {
   /* _vec4_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__vec4_));
   G__memfunc_setup("_vec4_",560,G__kinematicsDict_233_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_vec4_",560,G__kinematicsDict_233_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 1, 1, 1, 0, "u '_vec4_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_233_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_vec4_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_233_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_vec4_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_233_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_vec4_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_233_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_vec4_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_233_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_233_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_vec4_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_233_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_vec4_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_233_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_vec4_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_233_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_vec4_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_vec4_", 686, G__kinematicsDict_233_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_233_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 1, 1, 1, 1, 0, "u '_vec4_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_met_(void) {
   /* _met_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__met_));
   G__memfunc_setup("_met_",516,G__kinematicsDict_234_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__met_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_met_",516,G__kinematicsDict_234_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__met_), -1, 0, 1, 1, 1, 0, "u '_met_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__kinematicsDict_234_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_234_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_met_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_234_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_met_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_234_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_met_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_234_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_met_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_234_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_234_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_met_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_234_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_met_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_234_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_met_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_234_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_met_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_met_", 642, G__kinematicsDict_234_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_234_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__met_), -1, 1, 1, 1, 1, 0, "u '_met_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_track_(void) {
   /* _track_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__track_));
   G__memfunc_setup("_track_",723,G__kinematicsDict_235_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__track_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_track_",723,G__kinematicsDict_235_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__track_), -1, 0, 1, 1, 1, 0, "u '_track_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_235_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_track_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_235_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_track_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_235_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_track_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_235_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_track_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_235_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_235_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_track_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_235_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_track_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_235_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_track_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_235_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_track_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_track_", 849, G__kinematicsDict_235_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_235_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__track_), -1, 1, 1, 1, 1, 0, "u '_track_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_trg_bits_(void) {
   /* _trg_bits_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_));
   G__memfunc_setup("_trg_bits_",1052,G__kinematicsDict_236_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_trg_bits_",1052,G__kinematicsDict_236_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_), -1, 0, 1, 1, 1, 0, "u '_trg_bits_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setL1TrgBits",1160,G__kinematicsDict_236_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "K - 'ULong_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setL1TTrgBits",1244,G__kinematicsDict_236_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "K - 'ULong_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHLTAccTrgBits",1530,G__kinematicsDict_236_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "K - 'ULong_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHLTRunTrgBits",1576,G__kinematicsDict_236_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "K - 'ULong_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHLTErrTrgBits",1564,G__kinematicsDict_236_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "K - 'ULong_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_236_0_8, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_trg_bits_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_236_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_trg_bits_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_236_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_trg_bits_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_236_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_trg_bits_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_236_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_236_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_trg_bits_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_236_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_trg_bits_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_236_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_trg_bits_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_236_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_trg_bits_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_trg_bits_", 1178, G__kinematicsDict_236_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_236_0_21, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_), -1, 1, 1, 1, 1, 0, "u '_trg_bits_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_hlt_info_(void) {
   /* _hlt_info_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_));
   G__memfunc_setup("_hlt_info_",1041,G__kinematicsDict_237_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_hlt_info_",1041,G__kinematicsDict_237_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_), -1, 0, 1, 1, 1, 0, "u '_hlt_info_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_237_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_hlt_info_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_237_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_hlt_info_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_237_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_hlt_info_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_237_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_hlt_info_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_237_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_237_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_hlt_info_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_237_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_hlt_info_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_237_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_hlt_info_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_237_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_hlt_info_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_hlt_info_", 1167, G__kinematicsDict_237_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_237_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_), -1, 1, 1, 1, 1, 0, "u '_hlt_info_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_mets_(void) {
   /* _mets_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__mets_));
   G__memfunc_setup("_mets_",631,G__kinematicsDict_238_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__mets_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_mets_",631,G__kinematicsDict_238_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__mets_), -1, 0, 1, 1, 1, 0, "u '_mets_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_238_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_mets_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_238_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_mets_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_238_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_mets_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_238_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_mets_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_238_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_238_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_mets_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_238_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_mets_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_238_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_mets_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_238_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_mets_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_mets_", 757, G__kinematicsDict_238_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_238_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__mets_), -1, 1, 1, 1, 1, 0, "u '_mets_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_dileadingjets_(void) {
   /* _dileadingjets_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_));
   G__memfunc_setup("_dileadingjets_",1557,G__kinematicsDict_239_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_dileadingjets_",1557,G__kinematicsDict_239_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_), -1, 0, 1, 1, 1, 0, "u '_dileadingjets_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__kinematicsDict_239_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_239_0_4, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_dileadingjets_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_239_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_dileadingjets_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_239_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_dileadingjets_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_239_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_dileadingjets_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_239_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_239_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_dileadingjets_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_239_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_dileadingjets_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_239_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_dileadingjets_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_239_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_dileadingjets_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_dileadingjets_", 1683, G__kinematicsDict_239_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_239_0_17, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_), -1, 1, 1, 1, 1, 0, "u '_dileadingjets_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_run_info_(void) {
   /* _run_info_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__run_info_));
   G__memfunc_setup("_run_info_",1054,G__kinematicsDict_240_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__run_info_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_run_info_",1054,G__kinematicsDict_240_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__run_info_), -1, 0, 1, 1, 1, 0, "u '_run_info_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_240_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_run_info_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_240_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_run_info_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_240_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_run_info_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_240_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_run_info_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_240_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_240_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_run_info_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_240_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_run_info_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_240_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_run_info_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_240_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_run_info_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_run_info_", 1180, G__kinematicsDict_240_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_240_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__run_info_), -1, 1, 1, 1, 1, 0, "u '_run_info_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_vertex_(void) {
   /* _vertex_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__vertex_));
   G__memfunc_setup("_vertex_",860,G__kinematicsDict_241_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__vertex_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_vertex_",860,G__kinematicsDict_241_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__vertex_), -1, 0, 1, 1, 1, 0, "u '_vertex_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_241_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_vertex_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_241_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_vertex_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_241_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_vertex_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_241_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_vertex_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_241_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_241_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_vertex_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_241_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_vertex_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_241_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_vertex_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_241_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_vertex_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_vertex_", 986, G__kinematicsDict_241_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_241_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__vertex_), -1, 1, 1, 1, 1, 0, "u '_vertex_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_l1_obj_(void) {
   /* _l1_obj_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_));
   G__memfunc_setup("_l1_obj_",757,G__kinematicsDict_242_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_l1_obj_",757,G__kinematicsDict_242_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_), -1, 0, 1, 1, 1, 0, "u '_l1_obj_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_242_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_l1_obj_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_242_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_l1_obj_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_242_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_l1_obj_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_242_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_l1_obj_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_242_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_242_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_l1_obj_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_242_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_l1_obj_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_242_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_l1_obj_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_242_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_l1_obj_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_l1_obj_", 883, G__kinematicsDict_242_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_242_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_), -1, 1, 1, 1, 1, 0, "u '_l1_obj_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_supercluster_(void) {
   /* _supercluster_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_));
   G__memfunc_setup("_supercluster_",1519,G__kinematicsDict_243_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_supercluster_",1519,G__kinematicsDict_243_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_), -1, 0, 1, 1, 1, 0, "u '_supercluster_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_243_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_supercluster_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_243_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_supercluster_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_243_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_supercluster_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_243_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_supercluster_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_243_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_243_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_supercluster_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_243_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_supercluster_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_243_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_supercluster_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_243_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_supercluster_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_supercluster_", 1645, G__kinematicsDict_243_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_243_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_), -1, 1, 1, 1, 1, 0, "u '_supercluster_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_photon_(void) {
   /* _photon_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__photon_));
   G__memfunc_setup("_photon_",854,G__kinematicsDict_244_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__photon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_photon_",854,G__kinematicsDict_244_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__photon_), -1, 0, 1, 1, 1, 0, "u '_photon_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_244_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_photon_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_244_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_photon_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_244_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_photon_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_244_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_photon_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_244_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_244_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_photon_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_244_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_photon_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_244_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_photon_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_244_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_photon_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_photon_", 980, G__kinematicsDict_244_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_244_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__photon_), -1, 1, 1, 1, 1, 0, "u '_photon_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_electron_(void) {
   /* _electron_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__electron_));
   G__memfunc_setup("_electron_",1050,G__kinematicsDict_245_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__electron_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_electron_",1050,G__kinematicsDict_245_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__electron_), -1, 0, 1, 1, 1, 0, "u '_electron_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_245_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_electron_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_245_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_electron_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_245_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_electron_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_245_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_electron_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_245_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_245_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_electron_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_245_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_electron_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_245_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_electron_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_245_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_electron_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_electron_", 1176, G__kinematicsDict_245_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_245_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__electron_), -1, 1, 1, 1, 1, 0, "u '_electron_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_beam_spot_(void) {
   /* _beam_spot_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_));
   G__memfunc_setup("_beam_spot_",1144,G__kinematicsDict_246_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_beam_spot_",1144,G__kinematicsDict_246_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_), -1, 0, 1, 1, 1, 0, "u '_beam_spot_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_246_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_beam_spot_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_246_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_beam_spot_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_246_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_beam_spot_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_246_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_beam_spot_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_246_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_246_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_beam_spot_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_246_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_beam_spot_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_246_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_beam_spot_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_246_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_beam_spot_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_beam_spot_", 1270, G__kinematicsDict_246_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_246_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_), -1, 1, 1, 1, 1, 0, "u '_beam_spot_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_muon_(void) {
   /* _muon_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__muon_));
   G__memfunc_setup("_muon_",637,G__kinematicsDict_247_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__muon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_muon_",637,G__kinematicsDict_247_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__muon_), -1, 0, 1, 1, 1, 0, "u '_muon_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_247_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_muon_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_247_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_muon_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_247_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_muon_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_247_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_muon_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_247_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_247_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_muon_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_247_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_muon_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_247_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_muon_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_247_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_muon_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_muon_", 763, G__kinematicsDict_247_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_247_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__muon_), -1, 1, 1, 1, 1, 0, "u '_muon_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_gen_jet_(void) {
   /* _gen_jet_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_));
   G__memfunc_setup("_gen_jet_",922,G__kinematicsDict_248_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_gen_jet_",922,G__kinematicsDict_248_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_), -1, 0, 1, 1, 1, 0, "u '_gen_jet_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_248_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_gen_jet_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_248_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_jet_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_248_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_gen_jet_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_248_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_gen_jet_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_248_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_248_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_jet_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_248_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_jet_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_248_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_gen_jet_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_248_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_gen_jet_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_gen_jet_", 1048, G__kinematicsDict_248_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_248_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_), -1, 1, 1, 1, 1, 0, "u '_gen_jet_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_jet_(void) {
   /* _jet_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__jet_));
   G__memfunc_setup("_jet_",513,G__kinematicsDict_249_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_jet_",513,G__kinematicsDict_249_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 0, 1, 1, 1, 0, "u '_jet_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_249_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_jet_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_249_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_jet_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_249_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_jet_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_249_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_jet_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_249_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_249_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_jet_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_249_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_jet_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_249_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_jet_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_249_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_jet_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_jet_", 639, G__kinematicsDict_249_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_249_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 1, 1, 1, 1, 0, "u '_jet_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_di_jet_(void) {
   /* _di_jet_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_));
   G__memfunc_setup("_di_jet_",813,G__kinematicsDict_250_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_di_jet_",813,G__kinematicsDict_250_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_), -1, 0, 1, 1, 1, 0, "u '_di_jet_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_250_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_di_jet_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_250_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_di_jet_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_250_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_di_jet_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_250_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_di_jet_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_250_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_250_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_di_jet_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_250_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_di_jet_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_250_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_di_jet_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_250_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_di_jet_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_di_jet_", 939, G__kinematicsDict_250_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_250_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_), -1, 1, 1, 1, 1, 0, "u '_di_jet_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_W_(void) {
   /* _W_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__W_));
   G__memfunc_setup("_W_",277,G__kinematicsDict_251_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__W_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_W_",277,G__kinematicsDict_251_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__W_), -1, 0, 1, 1, 1, 0, "u '_W_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_251_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_W_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_251_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_W_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_251_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_W_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_251_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_W_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_251_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_251_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_W_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_251_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_W_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_251_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_W_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_251_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_W_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_W_", 403, G__kinematicsDict_251_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_251_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__W_), -1, 1, 1, 1, 1, 0, "u '_W_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_di_lepton_(void) {
   /* _di_lepton_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_));
   G__memfunc_setup("_di_lepton_",1148,G__kinematicsDict_252_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_di_lepton_",1148,G__kinematicsDict_252_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_), -1, 0, 1, 1, 1, 0, "u '_di_lepton_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_252_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_di_lepton_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_252_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_di_lepton_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_252_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_di_lepton_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_252_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_di_lepton_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_252_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_252_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_di_lepton_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_252_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_di_lepton_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_252_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_di_lepton_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_252_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_di_lepton_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_di_lepton_", 1274, G__kinematicsDict_252_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_252_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_), -1, 1, 1, 1, 1, 0, "u '_di_lepton_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_tri_lepton_(void) {
   /* _tri_lepton_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_));
   G__memfunc_setup("_tri_lepton_",1278,G__kinematicsDict_253_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_tri_lepton_",1278,G__kinematicsDict_253_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_), -1, 0, 1, 1, 1, 0, "u '_tri_lepton_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_253_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_tri_lepton_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_253_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_tri_lepton_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_253_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_tri_lepton_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_253_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_tri_lepton_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_253_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_253_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_tri_lepton_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_253_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_tri_lepton_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_253_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_tri_lepton_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_253_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_tri_lepton_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_tri_lepton_", 1404, G__kinematicsDict_253_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_253_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_), -1, 1, 1, 1, 1, 0, "u '_tri_lepton_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_quar_lepton_(void) {
   /* _quar_lepton_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_));
   G__memfunc_setup("_quar_lepton_",1384,G__kinematicsDict_254_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_quar_lepton_",1384,G__kinematicsDict_254_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_), -1, 0, 1, 1, 1, 0, "u '_quar_lepton_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_254_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_quar_lepton_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_254_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_quar_lepton_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_254_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_quar_lepton_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_254_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_quar_lepton_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_254_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_254_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_quar_lepton_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_254_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_quar_lepton_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_254_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_quar_lepton_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_254_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_quar_lepton_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_quar_lepton_", 1510, G__kinematicsDict_254_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_254_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_), -1, 1, 1, 1, 1, 0, "u '_quar_lepton_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_lepton_photon_(void) {
   /* _lepton_photon_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_));
   G__memfunc_setup("_lepton_photon_",1607,G__kinematicsDict_255_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_lepton_photon_",1607,G__kinematicsDict_255_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_), -1, 0, 1, 1, 1, 0, "u '_lepton_photon_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_255_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_lepton_photon_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_255_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_lepton_photon_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_255_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_lepton_photon_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_255_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_lepton_photon_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_255_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_255_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_lepton_photon_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_255_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_lepton_photon_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_255_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_lepton_photon_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_255_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_lepton_photon_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_lepton_photon_", 1733, G__kinematicsDict_255_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_255_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_), -1, 1, 1, 1, 1, 0, "u '_lepton_photon_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_dilepton_photon_(void) {
   /* _dilepton_photon_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_));
   G__memfunc_setup("_dilepton_photon_",1812,G__kinematicsDict_256_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_dilepton_photon_",1812,G__kinematicsDict_256_0_2, 105, G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_), -1, 0, 1, 1, 1, 0, "u '_dilepton_photon_' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_256_0_3, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_dilepton_photon_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_256_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_dilepton_photon_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_256_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_dilepton_photon_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_256_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_dilepton_photon_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_256_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_256_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_dilepton_photon_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_256_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_dilepton_photon_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_256_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_dilepton_photon_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_256_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_dilepton_photon_::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~_dilepton_photon_", 1938, G__kinematicsDict_256_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_256_0_16, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_), -1, 1, 1, 1, 1, 0, "u '_dilepton_photon_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunc_event_(void) {
   /* _event_ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__kinematicsDictLN__event_));
   G__memfunc_setup("_event_",736,G__kinematicsDict_257_0_1, 105, G__get_linked_tagnum(&G__kinematicsDictLN__event_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNum",1150,G__kinematicsDict_257_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRunNum",945,G__kinematicsDict_257_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLumiBlock",1230,G__kinematicsDict_257_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBunchCrossing",1668,G__kinematicsDict_257_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOrbitNum",1148,G__kinematicsDict_257_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeLow",1037,G__kinematicsDict_257_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeHigh",1115,G__kinematicsDict_257_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventWeight",1462,G__kinematicsDict_257_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBField",882,G__kinematicsDict_257_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTNonIsoElectrons",2093,G__kinematicsDict_257_0_11, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTElectrons",1495,G__kinematicsDict_257_0_12, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTElectronLs",1571,G__kinematicsDict_257_0_13, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTElectronLleg1s",1932,G__kinematicsDict_257_0_14, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTElectronLleg2s",1933,G__kinematicsDict_257_0_15, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTMuonElectrons",1910,G__kinematicsDict_257_0_16, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTElectronMuons",1910,G__kinematicsDict_257_0_17, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTNonIsoMuons",1680,G__kinematicsDict_257_0_18, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTMuons",1082,G__kinematicsDict_257_0_19, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTMuonLs",1158,G__kinematicsDict_257_0_20, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTMuonLleg1s",1519,G__kinematicsDict_257_0_21, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTMuonLleg2s",1520,G__kinematicsDict_257_0_22, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertices",1157,G__kinematicsDict_257_0_23, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSuperclusters",1732,G__kinematicsDict_257_0_24, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhotons",1067,G__kinematicsDict_257_0_25, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElectrons",1263,G__kinematicsDict_257_0_26, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getL1Objs",843,G__kinematicsDict_257_0_27, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTracks",936,G__kinematicsDict_257_0_28, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getJets",726,G__kinematicsDict_257_0_29, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGenJets",1008,G__kinematicsDict_257_0_30, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAKGenJets",1148,G__kinematicsDict_257_0_31, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCaloJets",1109,G__kinematicsDict_257_0_32, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getJPTJets",964,G__kinematicsDict_257_0_33, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPFJets",876,G__kinematicsDict_257_0_34, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMuons",850,G__kinematicsDict_257_0_35, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSimTracks",1233,G__kinematicsDict_257_0_36, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWs",522,G__kinematicsDict_257_0_37, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDileptons",1266,G__kinematicsDict_257_0_38, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDijets",931,G__kinematicsDict_257_0_39, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrileptons",1396,G__kinematicsDict_257_0_40, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQuarleptons",1502,G__kinematicsDict_257_0_41, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeptonPhotons",1693,G__kinematicsDict_257_0_42, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDileptonPhotons",1898,G__kinematicsDict_257_0_43, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeptonTrkPairs",1762,G__kinematicsDict_257_0_44, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrgBits",1023,G__kinematicsDict_257_0_45, 85, G__get_linked_tagnum(&G__kinematicsDictLN__trg_bits_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeamSpot",1115,G__kinematicsDict_257_0_46, 85, G__get_linked_tagnum(&G__kinematicsDictLN__beam_spot_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventFilterBit",1735,G__kinematicsDict_257_0_47, 85, G__get_linked_tagnum(&G__kinematicsDictLN__event_filterBit_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGenEventInfo",1512,G__kinematicsDict_257_0_48, 85, G__get_linked_tagnum(&G__kinematicsDictLN__gen_eventInfo_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGenTTbar",1079,G__kinematicsDict_257_0_49, 85, G__get_linked_tagnum(&G__kinematicsDictLN__gen_ttbar_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGenDrellYan",1397,G__kinematicsDict_257_0_50, 85, G__get_linked_tagnum(&G__kinematicsDictLN__gen_DrellYan_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCInfo",860,G__kinematicsDict_257_0_51, 85, G__get_linked_tagnum(&G__kinematicsDictLN__mc_process_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGenWZ",779,G__kinematicsDict_257_0_52, 85, G__get_linked_tagnum(&G__kinematicsDictLN__genwz_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunInfo",1025,G__kinematicsDict_257_0_53, 85, G__get_linked_tagnum(&G__kinematicsDictLN__run_info_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHLTInfo",948,G__kinematicsDict_257_0_54, 85, G__get_linked_tagnum(&G__kinematicsDictLN__hlt_info_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETs",665,G__kinematicsDict_257_0_55, 85, G__get_linked_tagnum(&G__kinematicsDictLN__mets_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDiLeadingJets",1591,G__kinematicsDict_257_0_56, 85, G__get_linked_tagnum(&G__kinematicsDictLN__dileadingjets_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTNonIsoMuon",1542,G__kinematicsDict_257_0_57, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTMuon",944,G__kinematicsDict_257_0_58, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTMuonL",1020,G__kinematicsDict_257_0_59, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTMuonLleg1",1381,G__kinematicsDict_257_0_60, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTMuonLleg2",1382,G__kinematicsDict_257_0_61, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTMuonElectron",1772,G__kinematicsDict_257_0_62, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTElectronMuon",1772,G__kinematicsDict_257_0_63, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTNonIsoElectron",1955,G__kinematicsDict_257_0_64, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTElectron",1357,G__kinematicsDict_257_0_65, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTElectronL",1433,G__kinematicsDict_257_0_66, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTElectronLleg1",1794,G__kinematicsDict_257_0_67, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHLTElectronLleg2",1795,G__kinematicsDict_257_0_68, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vec4_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addVertex",935,G__kinematicsDict_257_0_69, 85, G__get_linked_tagnum(&G__kinematicsDictLN__vertex_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSupercluster",1594,G__kinematicsDict_257_0_70, 85, G__get_linked_tagnum(&G__kinematicsDictLN__supercluster_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPhoton",929,G__kinematicsDict_257_0_71, 85, G__get_linked_tagnum(&G__kinematicsDictLN__photon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addElectron",1125,G__kinematicsDict_257_0_72, 85, G__get_linked_tagnum(&G__kinematicsDictLN__electron_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addL1Obj",705,G__kinematicsDict_257_0_73, 85, G__get_linked_tagnum(&G__kinematicsDictLN__l1_obj_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSimTrack",1095,G__kinematicsDict_257_0_74, 85, G__get_linked_tagnum(&G__kinematicsDictLN__track_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrack",798,G__kinematicsDict_257_0_75, 85, G__get_linked_tagnum(&G__kinematicsDictLN__track_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addGenJet",870,G__kinematicsDict_257_0_76, 85, G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addAKGenJet",1010,G__kinematicsDict_257_0_77, 85, G__get_linked_tagnum(&G__kinematicsDictLN__gen_jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addJet",588,G__kinematicsDict_257_0_78, 85, G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCaloJet",971,G__kinematicsDict_257_0_79, 85, G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addJPTJet",826,G__kinematicsDict_257_0_80, 85, G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPFJet",738,G__kinematicsDict_257_0_81, 85, G__get_linked_tagnum(&G__kinematicsDictLN__jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMuon",712,G__kinematicsDict_257_0_82, 85, G__get_linked_tagnum(&G__kinematicsDictLN__muon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addW",384,G__kinematicsDict_257_0_83, 85, G__get_linked_tagnum(&G__kinematicsDictLN__W_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDilepton",1128,G__kinematicsDict_257_0_84, 85, G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDijet",793,G__kinematicsDict_257_0_85, 85, G__get_linked_tagnum(&G__kinematicsDictLN__di_jet_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrilepton",1258,G__kinematicsDict_257_0_86, 85, G__get_linked_tagnum(&G__kinematicsDictLN__tri_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addQuarlepton",1364,G__kinematicsDict_257_0_87, 85, G__get_linked_tagnum(&G__kinematicsDictLN__quar_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLeptonPhoton",1555,G__kinematicsDict_257_0_88, 85, G__get_linked_tagnum(&G__kinematicsDictLN__lepton_photon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDileptonPhoton",1760,G__kinematicsDict_257_0_89, 85, G__get_linked_tagnum(&G__kinematicsDictLN__dilepton_photon_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLeptonTrkPair",1624,G__kinematicsDict_257_0_90, 85, G__get_linked_tagnum(&G__kinematicsDictLN__di_lepton_), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__kinematicsDict_257_0_91, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__kinematicsDict_257_0_92, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__kinematicsDict_257_0_93, 85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&_event_::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__kinematicsDict_257_0_94, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_event_::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__kinematicsDict_257_0_95, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&_event_::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__kinematicsDict_257_0_96, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&_event_::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__kinematicsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__kinematicsDict_257_0_100, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__kinematicsDict_257_0_101, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_event_::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__kinematicsDict_257_0_102, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_event_::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__kinematicsDict_257_0_103, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&_event_::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__kinematicsDict_257_0_104, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&_event_::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("_event_", 736, G__kinematicsDict_257_0_105, (int) ('i'), G__get_linked_tagnum(&G__kinematicsDictLN__event_), -1, 0, 1, 1, 1, 0, "u '_event_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~_event_", 862, G__kinematicsDict_257_0_106, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__kinematicsDict_257_0_107, (int) ('u'), G__get_linked_tagnum(&G__kinematicsDictLN__event_), -1, 1, 1, 1, 1, 0, "u '_event_' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunckinematicsDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalkinematicsDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funckinematicsDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__kinematicsDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__kinematicsDictLN__event_filterBit_ = { "_event_filterBit_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__gen_eventInfo_ = { "_gen_eventInfo_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__mc_process_ = { "_mc_process_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__gen_ttbar_ = { "_gen_ttbar_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__gen_DrellYan_ = { "_gen_DrellYan_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__genwz_ = { "_genwz_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__vec4_ = { "_vec4_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__met_ = { "_met_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__track_ = { "_track_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__trg_bits_ = { "_trg_bits_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__hlt_info_ = { "_hlt_info_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__mets_ = { "_mets_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__dileadingjets_ = { "_dileadingjets_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__run_info_ = { "_run_info_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__vertex_ = { "_vertex_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__l1_obj_ = { "_l1_obj_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__supercluster_ = { "_supercluster_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__photon_ = { "_photon_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__electron_ = { "_electron_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__beam_spot_ = { "_beam_spot_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__muon_ = { "_muon_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__gen_jet_ = { "_gen_jet_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__jet_ = { "_jet_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__di_jet_ = { "_di_jet_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__W_ = { "_W_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__di_lepton_ = { "_di_lepton_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__tri_lepton_ = { "_tri_lepton_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__quar_lepton_ = { "_quar_lepton_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__lepton_photon_ = { "_lepton_photon_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__dilepton_photon_ = { "_dilepton_photon_" , 99 , -1 };
G__linked_taginfo G__kinematicsDictLN__event_ = { "_event_" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablekinematicsDict() {
  G__kinematicsDictLN_TClass.tagnum = -1 ;
  G__kinematicsDictLN_TBuffer.tagnum = -1 ;
  G__kinematicsDictLN_TMemberInspector.tagnum = -1 ;
  G__kinematicsDictLN_TObject.tagnum = -1 ;
  G__kinematicsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__kinematicsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__kinematicsDictLN_TClonesArray.tagnum = -1 ;
  G__kinematicsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__kinematicsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__kinematicsDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__kinematicsDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__kinematicsDictLN__event_filterBit_.tagnum = -1 ;
  G__kinematicsDictLN__gen_eventInfo_.tagnum = -1 ;
  G__kinematicsDictLN__mc_process_.tagnum = -1 ;
  G__kinematicsDictLN__gen_ttbar_.tagnum = -1 ;
  G__kinematicsDictLN__gen_DrellYan_.tagnum = -1 ;
  G__kinematicsDictLN__genwz_.tagnum = -1 ;
  G__kinematicsDictLN__vec4_.tagnum = -1 ;
  G__kinematicsDictLN__met_.tagnum = -1 ;
  G__kinematicsDictLN__track_.tagnum = -1 ;
  G__kinematicsDictLN__trg_bits_.tagnum = -1 ;
  G__kinematicsDictLN__hlt_info_.tagnum = -1 ;
  G__kinematicsDictLN__mets_.tagnum = -1 ;
  G__kinematicsDictLN__dileadingjets_.tagnum = -1 ;
  G__kinematicsDictLN__run_info_.tagnum = -1 ;
  G__kinematicsDictLN__vertex_.tagnum = -1 ;
  G__kinematicsDictLN__l1_obj_.tagnum = -1 ;
  G__kinematicsDictLN__supercluster_.tagnum = -1 ;
  G__kinematicsDictLN__photon_.tagnum = -1 ;
  G__kinematicsDictLN__electron_.tagnum = -1 ;
  G__kinematicsDictLN__beam_spot_.tagnum = -1 ;
  G__kinematicsDictLN__muon_.tagnum = -1 ;
  G__kinematicsDictLN__gen_jet_.tagnum = -1 ;
  G__kinematicsDictLN__jet_.tagnum = -1 ;
  G__kinematicsDictLN__di_jet_.tagnum = -1 ;
  G__kinematicsDictLN__W_.tagnum = -1 ;
  G__kinematicsDictLN__di_lepton_.tagnum = -1 ;
  G__kinematicsDictLN__tri_lepton_.tagnum = -1 ;
  G__kinematicsDictLN__quar_lepton_.tagnum = -1 ;
  G__kinematicsDictLN__lepton_photon_.tagnum = -1 ;
  G__kinematicsDictLN__dilepton_photon_.tagnum = -1 ;
  G__kinematicsDictLN__event_.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablekinematicsDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__kinematicsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__event_filterBit_),sizeof(_event_filterBit_),-1,292608,(char*)NULL,G__setup_memvar_event_filterBit_,G__setup_memfunc_event_filterBit_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__gen_eventInfo_),sizeof(_gen_eventInfo_),-1,292608,(char*)NULL,G__setup_memvar_gen_eventInfo_,G__setup_memfunc_gen_eventInfo_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__mc_process_),sizeof(_mc_process_),-1,292608,(char*)NULL,G__setup_memvar_mc_process_,G__setup_memfunc_mc_process_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__gen_ttbar_),sizeof(_gen_ttbar_),-1,292608,(char*)NULL,G__setup_memvar_gen_ttbar_,G__setup_memfunc_gen_ttbar_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__gen_DrellYan_),sizeof(_gen_DrellYan_),-1,292608,(char*)NULL,G__setup_memvar_gen_DrellYan_,G__setup_memfunc_gen_DrellYan_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__genwz_),sizeof(_genwz_),-1,292608,(char*)NULL,G__setup_memvar_genwz_,G__setup_memfunc_genwz_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__vec4_),sizeof(_vec4_),-1,292608,(char*)NULL,G__setup_memvar_vec4_,G__setup_memfunc_vec4_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__met_),sizeof(_met_),-1,292608,(char*)NULL,G__setup_memvar_met_,G__setup_memfunc_met_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__track_),sizeof(_track_),-1,292608,(char*)NULL,G__setup_memvar_track_,G__setup_memfunc_track_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__trg_bits_),sizeof(_trg_bits_),-1,292608,(char*)NULL,G__setup_memvar_trg_bits_,G__setup_memfunc_trg_bits_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__hlt_info_),sizeof(_hlt_info_),-1,292608,(char*)NULL,G__setup_memvar_hlt_info_,G__setup_memfunc_hlt_info_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__mets_),sizeof(_mets_),-1,292608,(char*)NULL,G__setup_memvar_mets_,G__setup_memfunc_mets_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__dileadingjets_),sizeof(_dileadingjets_),-1,292608,(char*)NULL,G__setup_memvar_dileadingjets_,G__setup_memfunc_dileadingjets_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__run_info_),sizeof(_run_info_),-1,292608,(char*)NULL,G__setup_memvar_run_info_,G__setup_memfunc_run_info_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__vertex_),sizeof(_vertex_),-1,292608,(char*)NULL,G__setup_memvar_vertex_,G__setup_memfunc_vertex_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__l1_obj_),sizeof(_l1_obj_),-1,292608,(char*)NULL,G__setup_memvar_l1_obj_,G__setup_memfunc_l1_obj_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__supercluster_),sizeof(_supercluster_),-1,292608,(char*)NULL,G__setup_memvar_supercluster_,G__setup_memfunc_supercluster_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__photon_),sizeof(_photon_),-1,292608,(char*)NULL,G__setup_memvar_photon_,G__setup_memfunc_photon_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__electron_),sizeof(_electron_),-1,292608,(char*)NULL,G__setup_memvar_electron_,G__setup_memfunc_electron_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__beam_spot_),sizeof(_beam_spot_),-1,292608,(char*)NULL,G__setup_memvar_beam_spot_,G__setup_memfunc_beam_spot_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__muon_),sizeof(_muon_),-1,292608,(char*)NULL,G__setup_memvar_muon_,G__setup_memfunc_muon_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__gen_jet_),sizeof(_gen_jet_),-1,292608,(char*)NULL,G__setup_memvar_gen_jet_,G__setup_memfunc_gen_jet_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__jet_),sizeof(_jet_),-1,292608,(char*)NULL,G__setup_memvar_jet_,G__setup_memfunc_jet_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__di_jet_),sizeof(_di_jet_),-1,292608,(char*)NULL,G__setup_memvar_di_jet_,G__setup_memfunc_di_jet_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__W_),sizeof(_W_),-1,292608,(char*)NULL,G__setup_memvar_W_,G__setup_memfunc_W_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__di_lepton_),sizeof(_di_lepton_),-1,292608,(char*)NULL,G__setup_memvar_di_lepton_,G__setup_memfunc_di_lepton_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__tri_lepton_),sizeof(_tri_lepton_),-1,292608,(char*)NULL,G__setup_memvar_tri_lepton_,G__setup_memfunc_tri_lepton_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__quar_lepton_),sizeof(_quar_lepton_),-1,292608,(char*)NULL,G__setup_memvar_quar_lepton_,G__setup_memfunc_quar_lepton_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__lepton_photon_),sizeof(_lepton_photon_),-1,292608,(char*)NULL,G__setup_memvar_lepton_photon_,G__setup_memfunc_lepton_photon_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__dilepton_photon_),sizeof(_dilepton_photon_),-1,292608,(char*)NULL,G__setup_memvar_dilepton_photon_,G__setup_memfunc_dilepton_photon_);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__kinematicsDictLN__event_),sizeof(_event_),-1,292096,(char*)NULL,G__setup_memvar_event_,G__setup_memfunc_event_);
}
extern "C" void G__cpp_setupkinematicsDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupkinematicsDict()");
  G__set_cpp_environmentkinematicsDict();
  G__cpp_setup_tagtablekinematicsDict();

  G__cpp_setup_inheritancekinematicsDict();

  G__cpp_setup_typetablekinematicsDict();

  G__cpp_setup_memvarkinematicsDict();

  G__cpp_setup_memfunckinematicsDict();
  G__cpp_setup_globalkinematicsDict();
  G__cpp_setup_funckinematicsDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunckinematicsDict();
  return;
}
class G__cpp_setup_initkinematicsDict {
  public:
    G__cpp_setup_initkinematicsDict() { G__add_setup_func("kinematicsDict",(G__incsetup)(&G__cpp_setupkinematicsDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initkinematicsDict() { G__remove_setup_func("kinematicsDict"); }
};
G__cpp_setup_initkinematicsDict G__cpp_setup_initializerkinematicsDict;

